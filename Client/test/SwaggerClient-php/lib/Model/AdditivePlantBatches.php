<?php
/**
 * AdditivePlantBatches
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * METRC API
 *
 * Metrc Web API Documentation
 *
 * OpenAPI spec version: 0.2
 * Contact: paul.kohlhoff@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.11
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AdditivePlantBatches Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdditivePlantBatches implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AdditivePlantBatches';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'additive_type' => 'string',
'product_trade_name' => 'string',
'epa_registration_number' => 'string',
'product_supplier' => 'string',
'application_device' => 'string',
'total_amount_applied' => 'float',
'total_amount_unit_of_measure' => 'string',
'active_ingredients' => '\Swagger\Client\Model\ActiveIngredient[]',
'plant_batch_name' => 'string',
'actual_date' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'additive_type' => null,
'product_trade_name' => null,
'epa_registration_number' => null,
'product_supplier' => null,
'application_device' => null,
'total_amount_applied' => null,
'total_amount_unit_of_measure' => null,
'active_ingredients' => null,
'plant_batch_name' => null,
'actual_date' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additive_type' => 'AdditiveType',
'product_trade_name' => 'ProductTradeName',
'epa_registration_number' => 'EpaRegistrationNumber',
'product_supplier' => 'ProductSupplier',
'application_device' => 'ApplicationDevice',
'total_amount_applied' => 'TotalAmountApplied',
'total_amount_unit_of_measure' => 'TotalAmountUnitOfMeasure',
'active_ingredients' => 'ActiveIngredients',
'plant_batch_name' => 'PlantBatchName',
'actual_date' => 'ActualDate'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additive_type' => 'setAdditiveType',
'product_trade_name' => 'setProductTradeName',
'epa_registration_number' => 'setEpaRegistrationNumber',
'product_supplier' => 'setProductSupplier',
'application_device' => 'setApplicationDevice',
'total_amount_applied' => 'setTotalAmountApplied',
'total_amount_unit_of_measure' => 'setTotalAmountUnitOfMeasure',
'active_ingredients' => 'setActiveIngredients',
'plant_batch_name' => 'setPlantBatchName',
'actual_date' => 'setActualDate'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additive_type' => 'getAdditiveType',
'product_trade_name' => 'getProductTradeName',
'epa_registration_number' => 'getEpaRegistrationNumber',
'product_supplier' => 'getProductSupplier',
'application_device' => 'getApplicationDevice',
'total_amount_applied' => 'getTotalAmountApplied',
'total_amount_unit_of_measure' => 'getTotalAmountUnitOfMeasure',
'active_ingredients' => 'getActiveIngredients',
'plant_batch_name' => 'getPlantBatchName',
'actual_date' => 'getActualDate'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additive_type'] = isset($data['additive_type']) ? $data['additive_type'] : null;
        $this->container['product_trade_name'] = isset($data['product_trade_name']) ? $data['product_trade_name'] : null;
        $this->container['epa_registration_number'] = isset($data['epa_registration_number']) ? $data['epa_registration_number'] : null;
        $this->container['product_supplier'] = isset($data['product_supplier']) ? $data['product_supplier'] : null;
        $this->container['application_device'] = isset($data['application_device']) ? $data['application_device'] : null;
        $this->container['total_amount_applied'] = isset($data['total_amount_applied']) ? $data['total_amount_applied'] : null;
        $this->container['total_amount_unit_of_measure'] = isset($data['total_amount_unit_of_measure']) ? $data['total_amount_unit_of_measure'] : null;
        $this->container['active_ingredients'] = isset($data['active_ingredients']) ? $data['active_ingredients'] : null;
        $this->container['plant_batch_name'] = isset($data['plant_batch_name']) ? $data['plant_batch_name'] : null;
        $this->container['actual_date'] = isset($data['actual_date']) ? $data['actual_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additive_type
     *
     * @return string
     */
    public function getAdditiveType()
    {
        return $this->container['additive_type'];
    }

    /**
     * Sets additive_type
     *
     * @param string $additive_type additive_type
     *
     * @return $this
     */
    public function setAdditiveType($additive_type)
    {
        $this->container['additive_type'] = $additive_type;

        return $this;
    }

    /**
     * Gets product_trade_name
     *
     * @return string
     */
    public function getProductTradeName()
    {
        return $this->container['product_trade_name'];
    }

    /**
     * Sets product_trade_name
     *
     * @param string $product_trade_name product_trade_name
     *
     * @return $this
     */
    public function setProductTradeName($product_trade_name)
    {
        $this->container['product_trade_name'] = $product_trade_name;

        return $this;
    }

    /**
     * Gets epa_registration_number
     *
     * @return string
     */
    public function getEpaRegistrationNumber()
    {
        return $this->container['epa_registration_number'];
    }

    /**
     * Sets epa_registration_number
     *
     * @param string $epa_registration_number epa_registration_number
     *
     * @return $this
     */
    public function setEpaRegistrationNumber($epa_registration_number)
    {
        $this->container['epa_registration_number'] = $epa_registration_number;

        return $this;
    }

    /**
     * Gets product_supplier
     *
     * @return string
     */
    public function getProductSupplier()
    {
        return $this->container['product_supplier'];
    }

    /**
     * Sets product_supplier
     *
     * @param string $product_supplier product_supplier
     *
     * @return $this
     */
    public function setProductSupplier($product_supplier)
    {
        $this->container['product_supplier'] = $product_supplier;

        return $this;
    }

    /**
     * Gets application_device
     *
     * @return string
     */
    public function getApplicationDevice()
    {
        return $this->container['application_device'];
    }

    /**
     * Sets application_device
     *
     * @param string $application_device application_device
     *
     * @return $this
     */
    public function setApplicationDevice($application_device)
    {
        $this->container['application_device'] = $application_device;

        return $this;
    }

    /**
     * Gets total_amount_applied
     *
     * @return float
     */
    public function getTotalAmountApplied()
    {
        return $this->container['total_amount_applied'];
    }

    /**
     * Sets total_amount_applied
     *
     * @param float $total_amount_applied total_amount_applied
     *
     * @return $this
     */
    public function setTotalAmountApplied($total_amount_applied)
    {
        $this->container['total_amount_applied'] = $total_amount_applied;

        return $this;
    }

    /**
     * Gets total_amount_unit_of_measure
     *
     * @return string
     */
    public function getTotalAmountUnitOfMeasure()
    {
        return $this->container['total_amount_unit_of_measure'];
    }

    /**
     * Sets total_amount_unit_of_measure
     *
     * @param string $total_amount_unit_of_measure total_amount_unit_of_measure
     *
     * @return $this
     */
    public function setTotalAmountUnitOfMeasure($total_amount_unit_of_measure)
    {
        $this->container['total_amount_unit_of_measure'] = $total_amount_unit_of_measure;

        return $this;
    }

    /**
     * Gets active_ingredients
     *
     * @return \Swagger\Client\Model\ActiveIngredient[]
     */
    public function getActiveIngredients()
    {
        return $this->container['active_ingredients'];
    }

    /**
     * Sets active_ingredients
     *
     * @param \Swagger\Client\Model\ActiveIngredient[] $active_ingredients active_ingredients
     *
     * @return $this
     */
    public function setActiveIngredients($active_ingredients)
    {
        $this->container['active_ingredients'] = $active_ingredients;

        return $this;
    }

    /**
     * Gets plant_batch_name
     *
     * @return string
     */
    public function getPlantBatchName()
    {
        return $this->container['plant_batch_name'];
    }

    /**
     * Sets plant_batch_name
     *
     * @param string $plant_batch_name plant_batch_name
     *
     * @return $this
     */
    public function setPlantBatchName($plant_batch_name)
    {
        $this->container['plant_batch_name'] = $plant_batch_name;

        return $this;
    }

    /**
     * Gets actual_date
     *
     * @return string
     */
    public function getActualDate()
    {
        return $this->container['actual_date'];
    }

    /**
     * Sets actual_date
     *
     * @param string $actual_date actual_date
     *
     * @return $this
     */
    public function setActualDate($actual_date)
    {
        $this->container['actual_date'] = $actual_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
