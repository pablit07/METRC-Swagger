<?php
/**
 * ManicurePlant
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * METRC API
 *
 * Metrc Web API Documentation
 *
 * OpenAPI spec version: 0.2
 * Contact: paul.kohlhoff@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.11
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ManicurePlant Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ManicurePlant implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ManicurePlant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'plant' => 'string',
'weight' => 'float',
'unit_of_weight' => 'string',
'drying_room' => 'string',
'harvest_name' => 'string',
'patient_license_number' => 'string',
'actual_date' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'plant' => null,
'weight' => null,
'unit_of_weight' => null,
'drying_room' => null,
'harvest_name' => null,
'patient_license_number' => null,
'actual_date' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'plant' => 'Plant',
'weight' => 'Weight',
'unit_of_weight' => 'UnitOfWeight',
'drying_room' => 'DryingRoom',
'harvest_name' => 'HarvestName',
'patient_license_number' => 'PatientLicenseNumber',
'actual_date' => 'ActualDate'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'plant' => 'setPlant',
'weight' => 'setWeight',
'unit_of_weight' => 'setUnitOfWeight',
'drying_room' => 'setDryingRoom',
'harvest_name' => 'setHarvestName',
'patient_license_number' => 'setPatientLicenseNumber',
'actual_date' => 'setActualDate'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'plant' => 'getPlant',
'weight' => 'getWeight',
'unit_of_weight' => 'getUnitOfWeight',
'drying_room' => 'getDryingRoom',
'harvest_name' => 'getHarvestName',
'patient_license_number' => 'getPatientLicenseNumber',
'actual_date' => 'getActualDate'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['plant'] = isset($data['plant']) ? $data['plant'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['unit_of_weight'] = isset($data['unit_of_weight']) ? $data['unit_of_weight'] : null;
        $this->container['drying_room'] = isset($data['drying_room']) ? $data['drying_room'] : null;
        $this->container['harvest_name'] = isset($data['harvest_name']) ? $data['harvest_name'] : null;
        $this->container['patient_license_number'] = isset($data['patient_license_number']) ? $data['patient_license_number'] : null;
        $this->container['actual_date'] = isset($data['actual_date']) ? $data['actual_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets plant
     *
     * @return string
     */
    public function getPlant()
    {
        return $this->container['plant'];
    }

    /**
     * Sets plant
     *
     * @param string $plant plant
     *
     * @return $this
     */
    public function setPlant($plant)
    {
        $this->container['plant'] = $plant;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets unit_of_weight
     *
     * @return string
     */
    public function getUnitOfWeight()
    {
        return $this->container['unit_of_weight'];
    }

    /**
     * Sets unit_of_weight
     *
     * @param string $unit_of_weight unit_of_weight
     *
     * @return $this
     */
    public function setUnitOfWeight($unit_of_weight)
    {
        $this->container['unit_of_weight'] = $unit_of_weight;

        return $this;
    }

    /**
     * Gets drying_room
     *
     * @return string
     */
    public function getDryingRoom()
    {
        return $this->container['drying_room'];
    }

    /**
     * Sets drying_room
     *
     * @param string $drying_room drying_room
     *
     * @return $this
     */
    public function setDryingRoom($drying_room)
    {
        $this->container['drying_room'] = $drying_room;

        return $this;
    }

    /**
     * Gets harvest_name
     *
     * @return string
     */
    public function getHarvestName()
    {
        return $this->container['harvest_name'];
    }

    /**
     * Sets harvest_name
     *
     * @param string $harvest_name harvest_name
     *
     * @return $this
     */
    public function setHarvestName($harvest_name)
    {
        $this->container['harvest_name'] = $harvest_name;

        return $this;
    }

    /**
     * Gets patient_license_number
     *
     * @return string
     */
    public function getPatientLicenseNumber()
    {
        return $this->container['patient_license_number'];
    }

    /**
     * Sets patient_license_number
     *
     * @param string $patient_license_number patient_license_number
     *
     * @return $this
     */
    public function setPatientLicenseNumber($patient_license_number)
    {
        $this->container['patient_license_number'] = $patient_license_number;

        return $this;
    }

    /**
     * Gets actual_date
     *
     * @return string
     */
    public function getActualDate()
    {
        return $this->container['actual_date'];
    }

    /**
     * Sets actual_date
     *
     * @param string $actual_date actual_date
     *
     * @return $this
     */
    public function setActualDate($actual_date)
    {
        $this->container['actual_date'] = $actual_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
