<?php
/**
 * Transaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * METRC API
 *
 * Metrc Web API Documentation
 *
 * OpenAPI spec version: 0.2
 * Contact: paul.kohlhoff@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.11
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Transaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'package_id' => 'int',
'package_label' => 'string',
'product_name' => 'string',
'quantity_sold' => 'float',
'unit_of_measure_name' => 'string',
'unit_of_measure_abbreviation' => 'string',
'total_price' => 'float',
'sales_delivery_state' => 'string',
'archived_date' => 'string',
'last_modified' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'package_id' => null,
'package_label' => null,
'product_name' => null,
'quantity_sold' => null,
'unit_of_measure_name' => null,
'unit_of_measure_abbreviation' => null,
'total_price' => null,
'sales_delivery_state' => null,
'archived_date' => null,
'last_modified' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'package_id' => 'PackageId',
'package_label' => 'PackageLabel',
'product_name' => 'ProductName',
'quantity_sold' => 'QuantitySold',
'unit_of_measure_name' => 'UnitOfMeasureName',
'unit_of_measure_abbreviation' => 'UnitOfMeasureAbbreviation',
'total_price' => 'TotalPrice',
'sales_delivery_state' => 'SalesDeliveryState',
'archived_date' => 'ArchivedDate',
'last_modified' => 'LastModified'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'package_id' => 'setPackageId',
'package_label' => 'setPackageLabel',
'product_name' => 'setProductName',
'quantity_sold' => 'setQuantitySold',
'unit_of_measure_name' => 'setUnitOfMeasureName',
'unit_of_measure_abbreviation' => 'setUnitOfMeasureAbbreviation',
'total_price' => 'setTotalPrice',
'sales_delivery_state' => 'setSalesDeliveryState',
'archived_date' => 'setArchivedDate',
'last_modified' => 'setLastModified'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'package_id' => 'getPackageId',
'package_label' => 'getPackageLabel',
'product_name' => 'getProductName',
'quantity_sold' => 'getQuantitySold',
'unit_of_measure_name' => 'getUnitOfMeasureName',
'unit_of_measure_abbreviation' => 'getUnitOfMeasureAbbreviation',
'total_price' => 'getTotalPrice',
'sales_delivery_state' => 'getSalesDeliveryState',
'archived_date' => 'getArchivedDate',
'last_modified' => 'getLastModified'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['package_id'] = isset($data['package_id']) ? $data['package_id'] : null;
        $this->container['package_label'] = isset($data['package_label']) ? $data['package_label'] : null;
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['quantity_sold'] = isset($data['quantity_sold']) ? $data['quantity_sold'] : null;
        $this->container['unit_of_measure_name'] = isset($data['unit_of_measure_name']) ? $data['unit_of_measure_name'] : null;
        $this->container['unit_of_measure_abbreviation'] = isset($data['unit_of_measure_abbreviation']) ? $data['unit_of_measure_abbreviation'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['sales_delivery_state'] = isset($data['sales_delivery_state']) ? $data['sales_delivery_state'] : null;
        $this->container['archived_date'] = isset($data['archived_date']) ? $data['archived_date'] : null;
        $this->container['last_modified'] = isset($data['last_modified']) ? $data['last_modified'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets package_id
     *
     * @return int
     */
    public function getPackageId()
    {
        return $this->container['package_id'];
    }

    /**
     * Sets package_id
     *
     * @param int $package_id package_id
     *
     * @return $this
     */
    public function setPackageId($package_id)
    {
        $this->container['package_id'] = $package_id;

        return $this;
    }

    /**
     * Gets package_label
     *
     * @return string
     */
    public function getPackageLabel()
    {
        return $this->container['package_label'];
    }

    /**
     * Sets package_label
     *
     * @param string $package_label package_label
     *
     * @return $this
     */
    public function setPackageLabel($package_label)
    {
        $this->container['package_label'] = $package_label;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name product_name
     *
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets quantity_sold
     *
     * @return float
     */
    public function getQuantitySold()
    {
        return $this->container['quantity_sold'];
    }

    /**
     * Sets quantity_sold
     *
     * @param float $quantity_sold quantity_sold
     *
     * @return $this
     */
    public function setQuantitySold($quantity_sold)
    {
        $this->container['quantity_sold'] = $quantity_sold;

        return $this;
    }

    /**
     * Gets unit_of_measure_name
     *
     * @return string
     */
    public function getUnitOfMeasureName()
    {
        return $this->container['unit_of_measure_name'];
    }

    /**
     * Sets unit_of_measure_name
     *
     * @param string $unit_of_measure_name unit_of_measure_name
     *
     * @return $this
     */
    public function setUnitOfMeasureName($unit_of_measure_name)
    {
        $this->container['unit_of_measure_name'] = $unit_of_measure_name;

        return $this;
    }

    /**
     * Gets unit_of_measure_abbreviation
     *
     * @return string
     */
    public function getUnitOfMeasureAbbreviation()
    {
        return $this->container['unit_of_measure_abbreviation'];
    }

    /**
     * Sets unit_of_measure_abbreviation
     *
     * @param string $unit_of_measure_abbreviation unit_of_measure_abbreviation
     *
     * @return $this
     */
    public function setUnitOfMeasureAbbreviation($unit_of_measure_abbreviation)
    {
        $this->container['unit_of_measure_abbreviation'] = $unit_of_measure_abbreviation;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return float
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param float $total_price total_price
     *
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets sales_delivery_state
     *
     * @return string
     */
    public function getSalesDeliveryState()
    {
        return $this->container['sales_delivery_state'];
    }

    /**
     * Sets sales_delivery_state
     *
     * @param string $sales_delivery_state sales_delivery_state
     *
     * @return $this
     */
    public function setSalesDeliveryState($sales_delivery_state)
    {
        $this->container['sales_delivery_state'] = $sales_delivery_state;

        return $this;
    }

    /**
     * Gets archived_date
     *
     * @return string
     */
    public function getArchivedDate()
    {
        return $this->container['archived_date'];
    }

    /**
     * Sets archived_date
     *
     * @param string $archived_date archived_date
     *
     * @return $this
     */
    public function setArchivedDate($archived_date)
    {
        $this->container['archived_date'] = $archived_date;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return string
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param string $last_modified last_modified
     *
     * @return $this
     */
    public function setLastModified($last_modified)
    {
        $this->container['last_modified'] = $last_modified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
