<?php
/**
 * UpdateItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * METRC API
 *
 * Metrc Web API Documentation
 *
 * OpenAPI spec version: 0.2
 * Contact: paul.kohlhoff@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.11
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UpdateItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'name' => 'string',
'item_category' => 'string',
'unit_of_measure' => 'string',
'strain' => 'string',
'item_brand' => 'string',
'administration_method' => 'string',
'unit_cbd_percent' => 'string',
'unit_cbd_content' => 'string',
'unit_cbd_content_unit_of_measure' => 'string',
'unit_thc_percent' => 'string',
'unit_thc_content' => 'string',
'unit_thc_content_unit_of_measure' => 'string',
'unit_volume' => 'string',
'unit_volume_unit_of_measure' => 'string',
'unit_weight' => 'string',
'unit_weight_unit_of_measure' => 'string',
'serving_size' => 'string',
'supply_duration_days' => 'string',
'ingredients' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'name' => null,
'item_category' => null,
'unit_of_measure' => null,
'strain' => null,
'item_brand' => null,
'administration_method' => null,
'unit_cbd_percent' => null,
'unit_cbd_content' => null,
'unit_cbd_content_unit_of_measure' => null,
'unit_thc_percent' => null,
'unit_thc_content' => null,
'unit_thc_content_unit_of_measure' => null,
'unit_volume' => null,
'unit_volume_unit_of_measure' => null,
'unit_weight' => null,
'unit_weight_unit_of_measure' => null,
'serving_size' => null,
'supply_duration_days' => null,
'ingredients' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
'name' => 'Name',
'item_category' => 'ItemCategory',
'unit_of_measure' => 'UnitOfMeasure',
'strain' => 'Strain',
'item_brand' => 'ItemBrand',
'administration_method' => 'AdministrationMethod',
'unit_cbd_percent' => 'UnitCbdPercent',
'unit_cbd_content' => 'UnitCbdContent',
'unit_cbd_content_unit_of_measure' => 'UnitCbdContentUnitOfMeasure',
'unit_thc_percent' => 'UnitThcPercent',
'unit_thc_content' => 'UnitThcContent',
'unit_thc_content_unit_of_measure' => 'UnitThcContentUnitOfMeasure',
'unit_volume' => 'UnitVolume',
'unit_volume_unit_of_measure' => 'UnitVolumeUnitOfMeasure',
'unit_weight' => 'UnitWeight',
'unit_weight_unit_of_measure' => 'UnitWeightUnitOfMeasure',
'serving_size' => 'ServingSize',
'supply_duration_days' => 'SupplyDurationDays',
'ingredients' => 'Ingredients'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'item_category' => 'setItemCategory',
'unit_of_measure' => 'setUnitOfMeasure',
'strain' => 'setStrain',
'item_brand' => 'setItemBrand',
'administration_method' => 'setAdministrationMethod',
'unit_cbd_percent' => 'setUnitCbdPercent',
'unit_cbd_content' => 'setUnitCbdContent',
'unit_cbd_content_unit_of_measure' => 'setUnitCbdContentUnitOfMeasure',
'unit_thc_percent' => 'setUnitThcPercent',
'unit_thc_content' => 'setUnitThcContent',
'unit_thc_content_unit_of_measure' => 'setUnitThcContentUnitOfMeasure',
'unit_volume' => 'setUnitVolume',
'unit_volume_unit_of_measure' => 'setUnitVolumeUnitOfMeasure',
'unit_weight' => 'setUnitWeight',
'unit_weight_unit_of_measure' => 'setUnitWeightUnitOfMeasure',
'serving_size' => 'setServingSize',
'supply_duration_days' => 'setSupplyDurationDays',
'ingredients' => 'setIngredients'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'item_category' => 'getItemCategory',
'unit_of_measure' => 'getUnitOfMeasure',
'strain' => 'getStrain',
'item_brand' => 'getItemBrand',
'administration_method' => 'getAdministrationMethod',
'unit_cbd_percent' => 'getUnitCbdPercent',
'unit_cbd_content' => 'getUnitCbdContent',
'unit_cbd_content_unit_of_measure' => 'getUnitCbdContentUnitOfMeasure',
'unit_thc_percent' => 'getUnitThcPercent',
'unit_thc_content' => 'getUnitThcContent',
'unit_thc_content_unit_of_measure' => 'getUnitThcContentUnitOfMeasure',
'unit_volume' => 'getUnitVolume',
'unit_volume_unit_of_measure' => 'getUnitVolumeUnitOfMeasure',
'unit_weight' => 'getUnitWeight',
'unit_weight_unit_of_measure' => 'getUnitWeightUnitOfMeasure',
'serving_size' => 'getServingSize',
'supply_duration_days' => 'getSupplyDurationDays',
'ingredients' => 'getIngredients'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['item_category'] = isset($data['item_category']) ? $data['item_category'] : null;
        $this->container['unit_of_measure'] = isset($data['unit_of_measure']) ? $data['unit_of_measure'] : null;
        $this->container['strain'] = isset($data['strain']) ? $data['strain'] : null;
        $this->container['item_brand'] = isset($data['item_brand']) ? $data['item_brand'] : null;
        $this->container['administration_method'] = isset($data['administration_method']) ? $data['administration_method'] : null;
        $this->container['unit_cbd_percent'] = isset($data['unit_cbd_percent']) ? $data['unit_cbd_percent'] : null;
        $this->container['unit_cbd_content'] = isset($data['unit_cbd_content']) ? $data['unit_cbd_content'] : null;
        $this->container['unit_cbd_content_unit_of_measure'] = isset($data['unit_cbd_content_unit_of_measure']) ? $data['unit_cbd_content_unit_of_measure'] : null;
        $this->container['unit_thc_percent'] = isset($data['unit_thc_percent']) ? $data['unit_thc_percent'] : null;
        $this->container['unit_thc_content'] = isset($data['unit_thc_content']) ? $data['unit_thc_content'] : null;
        $this->container['unit_thc_content_unit_of_measure'] = isset($data['unit_thc_content_unit_of_measure']) ? $data['unit_thc_content_unit_of_measure'] : null;
        $this->container['unit_volume'] = isset($data['unit_volume']) ? $data['unit_volume'] : null;
        $this->container['unit_volume_unit_of_measure'] = isset($data['unit_volume_unit_of_measure']) ? $data['unit_volume_unit_of_measure'] : null;
        $this->container['unit_weight'] = isset($data['unit_weight']) ? $data['unit_weight'] : null;
        $this->container['unit_weight_unit_of_measure'] = isset($data['unit_weight_unit_of_measure']) ? $data['unit_weight_unit_of_measure'] : null;
        $this->container['serving_size'] = isset($data['serving_size']) ? $data['serving_size'] : null;
        $this->container['supply_duration_days'] = isset($data['supply_duration_days']) ? $data['supply_duration_days'] : null;
        $this->container['ingredients'] = isset($data['ingredients']) ? $data['ingredients'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets item_category
     *
     * @return string
     */
    public function getItemCategory()
    {
        return $this->container['item_category'];
    }

    /**
     * Sets item_category
     *
     * @param string $item_category item_category
     *
     * @return $this
     */
    public function setItemCategory($item_category)
    {
        $this->container['item_category'] = $item_category;

        return $this;
    }

    /**
     * Gets unit_of_measure
     *
     * @return string
     */
    public function getUnitOfMeasure()
    {
        return $this->container['unit_of_measure'];
    }

    /**
     * Sets unit_of_measure
     *
     * @param string $unit_of_measure unit_of_measure
     *
     * @return $this
     */
    public function setUnitOfMeasure($unit_of_measure)
    {
        $this->container['unit_of_measure'] = $unit_of_measure;

        return $this;
    }

    /**
     * Gets strain
     *
     * @return string
     */
    public function getStrain()
    {
        return $this->container['strain'];
    }

    /**
     * Sets strain
     *
     * @param string $strain strain
     *
     * @return $this
     */
    public function setStrain($strain)
    {
        $this->container['strain'] = $strain;

        return $this;
    }

    /**
     * Gets item_brand
     *
     * @return string
     */
    public function getItemBrand()
    {
        return $this->container['item_brand'];
    }

    /**
     * Sets item_brand
     *
     * @param string $item_brand item_brand
     *
     * @return $this
     */
    public function setItemBrand($item_brand)
    {
        $this->container['item_brand'] = $item_brand;

        return $this;
    }

    /**
     * Gets administration_method
     *
     * @return string
     */
    public function getAdministrationMethod()
    {
        return $this->container['administration_method'];
    }

    /**
     * Sets administration_method
     *
     * @param string $administration_method administration_method
     *
     * @return $this
     */
    public function setAdministrationMethod($administration_method)
    {
        $this->container['administration_method'] = $administration_method;

        return $this;
    }

    /**
     * Gets unit_cbd_percent
     *
     * @return string
     */
    public function getUnitCbdPercent()
    {
        return $this->container['unit_cbd_percent'];
    }

    /**
     * Sets unit_cbd_percent
     *
     * @param string $unit_cbd_percent unit_cbd_percent
     *
     * @return $this
     */
    public function setUnitCbdPercent($unit_cbd_percent)
    {
        $this->container['unit_cbd_percent'] = $unit_cbd_percent;

        return $this;
    }

    /**
     * Gets unit_cbd_content
     *
     * @return string
     */
    public function getUnitCbdContent()
    {
        return $this->container['unit_cbd_content'];
    }

    /**
     * Sets unit_cbd_content
     *
     * @param string $unit_cbd_content unit_cbd_content
     *
     * @return $this
     */
    public function setUnitCbdContent($unit_cbd_content)
    {
        $this->container['unit_cbd_content'] = $unit_cbd_content;

        return $this;
    }

    /**
     * Gets unit_cbd_content_unit_of_measure
     *
     * @return string
     */
    public function getUnitCbdContentUnitOfMeasure()
    {
        return $this->container['unit_cbd_content_unit_of_measure'];
    }

    /**
     * Sets unit_cbd_content_unit_of_measure
     *
     * @param string $unit_cbd_content_unit_of_measure unit_cbd_content_unit_of_measure
     *
     * @return $this
     */
    public function setUnitCbdContentUnitOfMeasure($unit_cbd_content_unit_of_measure)
    {
        $this->container['unit_cbd_content_unit_of_measure'] = $unit_cbd_content_unit_of_measure;

        return $this;
    }

    /**
     * Gets unit_thc_percent
     *
     * @return string
     */
    public function getUnitThcPercent()
    {
        return $this->container['unit_thc_percent'];
    }

    /**
     * Sets unit_thc_percent
     *
     * @param string $unit_thc_percent unit_thc_percent
     *
     * @return $this
     */
    public function setUnitThcPercent($unit_thc_percent)
    {
        $this->container['unit_thc_percent'] = $unit_thc_percent;

        return $this;
    }

    /**
     * Gets unit_thc_content
     *
     * @return string
     */
    public function getUnitThcContent()
    {
        return $this->container['unit_thc_content'];
    }

    /**
     * Sets unit_thc_content
     *
     * @param string $unit_thc_content unit_thc_content
     *
     * @return $this
     */
    public function setUnitThcContent($unit_thc_content)
    {
        $this->container['unit_thc_content'] = $unit_thc_content;

        return $this;
    }

    /**
     * Gets unit_thc_content_unit_of_measure
     *
     * @return string
     */
    public function getUnitThcContentUnitOfMeasure()
    {
        return $this->container['unit_thc_content_unit_of_measure'];
    }

    /**
     * Sets unit_thc_content_unit_of_measure
     *
     * @param string $unit_thc_content_unit_of_measure unit_thc_content_unit_of_measure
     *
     * @return $this
     */
    public function setUnitThcContentUnitOfMeasure($unit_thc_content_unit_of_measure)
    {
        $this->container['unit_thc_content_unit_of_measure'] = $unit_thc_content_unit_of_measure;

        return $this;
    }

    /**
     * Gets unit_volume
     *
     * @return string
     */
    public function getUnitVolume()
    {
        return $this->container['unit_volume'];
    }

    /**
     * Sets unit_volume
     *
     * @param string $unit_volume unit_volume
     *
     * @return $this
     */
    public function setUnitVolume($unit_volume)
    {
        $this->container['unit_volume'] = $unit_volume;

        return $this;
    }

    /**
     * Gets unit_volume_unit_of_measure
     *
     * @return string
     */
    public function getUnitVolumeUnitOfMeasure()
    {
        return $this->container['unit_volume_unit_of_measure'];
    }

    /**
     * Sets unit_volume_unit_of_measure
     *
     * @param string $unit_volume_unit_of_measure unit_volume_unit_of_measure
     *
     * @return $this
     */
    public function setUnitVolumeUnitOfMeasure($unit_volume_unit_of_measure)
    {
        $this->container['unit_volume_unit_of_measure'] = $unit_volume_unit_of_measure;

        return $this;
    }

    /**
     * Gets unit_weight
     *
     * @return string
     */
    public function getUnitWeight()
    {
        return $this->container['unit_weight'];
    }

    /**
     * Sets unit_weight
     *
     * @param string $unit_weight unit_weight
     *
     * @return $this
     */
    public function setUnitWeight($unit_weight)
    {
        $this->container['unit_weight'] = $unit_weight;

        return $this;
    }

    /**
     * Gets unit_weight_unit_of_measure
     *
     * @return string
     */
    public function getUnitWeightUnitOfMeasure()
    {
        return $this->container['unit_weight_unit_of_measure'];
    }

    /**
     * Sets unit_weight_unit_of_measure
     *
     * @param string $unit_weight_unit_of_measure unit_weight_unit_of_measure
     *
     * @return $this
     */
    public function setUnitWeightUnitOfMeasure($unit_weight_unit_of_measure)
    {
        $this->container['unit_weight_unit_of_measure'] = $unit_weight_unit_of_measure;

        return $this;
    }

    /**
     * Gets serving_size
     *
     * @return string
     */
    public function getServingSize()
    {
        return $this->container['serving_size'];
    }

    /**
     * Sets serving_size
     *
     * @param string $serving_size serving_size
     *
     * @return $this
     */
    public function setServingSize($serving_size)
    {
        $this->container['serving_size'] = $serving_size;

        return $this;
    }

    /**
     * Gets supply_duration_days
     *
     * @return string
     */
    public function getSupplyDurationDays()
    {
        return $this->container['supply_duration_days'];
    }

    /**
     * Sets supply_duration_days
     *
     * @param string $supply_duration_days supply_duration_days
     *
     * @return $this
     */
    public function setSupplyDurationDays($supply_duration_days)
    {
        $this->container['supply_duration_days'] = $supply_duration_days;

        return $this;
    }

    /**
     * Gets ingredients
     *
     * @return string
     */
    public function getIngredients()
    {
        return $this->container['ingredients'];
    }

    /**
     * Sets ingredients
     *
     * @param string $ingredients ingredients
     *
     * @return $this
     */
    public function setIngredients($ingredients)
    {
        $this->container['ingredients'] = $ingredients;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
