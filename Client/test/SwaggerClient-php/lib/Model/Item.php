<?php
/**
 * Item
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * METRC API
 *
 * Metrc Web API Documentation
 *
 * OpenAPI spec version: 0.2
 * Contact: paul.kohlhoff@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.11
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Item Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Item implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'name' => 'string',
'product_category_name' => 'string',
'product_category_type' => 'string',
'quantity_type' => 'string',
'default_lab_testing_state' => 'int',
'unit_of_measure_name' => 'string',
'approval_status' => 'int',
'strain_id' => 'int',
'strain_name' => 'string',
'administration_method' => 'string',
'unit_cbd_percent' => 'string',
'unit_cbd_content' => 'string',
'unit_cbd_content_unit_of_measure_name' => 'string',
'unit_thc_percent' => 'string',
'unit_thc_content' => 'string',
'unit_thc_content_unit_of_measure_name' => 'string',
'unit_volume' => 'string',
'unit_volume_unit_of_measure_name' => 'string',
'unit_weight' => 'string',
'unit_weight_unit_of_measure_name' => 'string',
'serving_size' => 'string',
'supply_duration_days' => 'string',
'unit_quantity' => 'string',
'unit_quantity_unit_of_measure_name' => 'string',
'ingredients' => 'string',
'is_used' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'name' => null,
'product_category_name' => null,
'product_category_type' => null,
'quantity_type' => null,
'default_lab_testing_state' => null,
'unit_of_measure_name' => null,
'approval_status' => null,
'strain_id' => null,
'strain_name' => null,
'administration_method' => null,
'unit_cbd_percent' => null,
'unit_cbd_content' => null,
'unit_cbd_content_unit_of_measure_name' => null,
'unit_thc_percent' => null,
'unit_thc_content' => null,
'unit_thc_content_unit_of_measure_name' => null,
'unit_volume' => null,
'unit_volume_unit_of_measure_name' => null,
'unit_weight' => null,
'unit_weight_unit_of_measure_name' => null,
'serving_size' => null,
'supply_duration_days' => null,
'unit_quantity' => null,
'unit_quantity_unit_of_measure_name' => null,
'ingredients' => null,
'is_used' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
'name' => 'Name',
'product_category_name' => 'ProductCategoryName',
'product_category_type' => 'ProductCategoryType',
'quantity_type' => 'QuantityType',
'default_lab_testing_state' => 'DefaultLabTestingState',
'unit_of_measure_name' => 'UnitOfMeasureName',
'approval_status' => 'ApprovalStatus',
'strain_id' => 'StrainId',
'strain_name' => 'StrainName',
'administration_method' => 'AdministrationMethod',
'unit_cbd_percent' => 'UnitCbdPercent',
'unit_cbd_content' => 'UnitCbdContent',
'unit_cbd_content_unit_of_measure_name' => 'UnitCbdContentUnitOfMeasureName',
'unit_thc_percent' => 'UnitThcPercent',
'unit_thc_content' => 'UnitThcContent',
'unit_thc_content_unit_of_measure_name' => 'UnitThcContentUnitOfMeasureName',
'unit_volume' => 'UnitVolume',
'unit_volume_unit_of_measure_name' => 'UnitVolumeUnitOfMeasureName',
'unit_weight' => 'UnitWeight',
'unit_weight_unit_of_measure_name' => 'UnitWeightUnitOfMeasureName',
'serving_size' => 'ServingSize',
'supply_duration_days' => 'SupplyDurationDays',
'unit_quantity' => 'UnitQuantity',
'unit_quantity_unit_of_measure_name' => 'UnitQuantityUnitOfMeasureName',
'ingredients' => 'Ingredients',
'is_used' => 'IsUsed'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'product_category_name' => 'setProductCategoryName',
'product_category_type' => 'setProductCategoryType',
'quantity_type' => 'setQuantityType',
'default_lab_testing_state' => 'setDefaultLabTestingState',
'unit_of_measure_name' => 'setUnitOfMeasureName',
'approval_status' => 'setApprovalStatus',
'strain_id' => 'setStrainId',
'strain_name' => 'setStrainName',
'administration_method' => 'setAdministrationMethod',
'unit_cbd_percent' => 'setUnitCbdPercent',
'unit_cbd_content' => 'setUnitCbdContent',
'unit_cbd_content_unit_of_measure_name' => 'setUnitCbdContentUnitOfMeasureName',
'unit_thc_percent' => 'setUnitThcPercent',
'unit_thc_content' => 'setUnitThcContent',
'unit_thc_content_unit_of_measure_name' => 'setUnitThcContentUnitOfMeasureName',
'unit_volume' => 'setUnitVolume',
'unit_volume_unit_of_measure_name' => 'setUnitVolumeUnitOfMeasureName',
'unit_weight' => 'setUnitWeight',
'unit_weight_unit_of_measure_name' => 'setUnitWeightUnitOfMeasureName',
'serving_size' => 'setServingSize',
'supply_duration_days' => 'setSupplyDurationDays',
'unit_quantity' => 'setUnitQuantity',
'unit_quantity_unit_of_measure_name' => 'setUnitQuantityUnitOfMeasureName',
'ingredients' => 'setIngredients',
'is_used' => 'setIsUsed'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'product_category_name' => 'getProductCategoryName',
'product_category_type' => 'getProductCategoryType',
'quantity_type' => 'getQuantityType',
'default_lab_testing_state' => 'getDefaultLabTestingState',
'unit_of_measure_name' => 'getUnitOfMeasureName',
'approval_status' => 'getApprovalStatus',
'strain_id' => 'getStrainId',
'strain_name' => 'getStrainName',
'administration_method' => 'getAdministrationMethod',
'unit_cbd_percent' => 'getUnitCbdPercent',
'unit_cbd_content' => 'getUnitCbdContent',
'unit_cbd_content_unit_of_measure_name' => 'getUnitCbdContentUnitOfMeasureName',
'unit_thc_percent' => 'getUnitThcPercent',
'unit_thc_content' => 'getUnitThcContent',
'unit_thc_content_unit_of_measure_name' => 'getUnitThcContentUnitOfMeasureName',
'unit_volume' => 'getUnitVolume',
'unit_volume_unit_of_measure_name' => 'getUnitVolumeUnitOfMeasureName',
'unit_weight' => 'getUnitWeight',
'unit_weight_unit_of_measure_name' => 'getUnitWeightUnitOfMeasureName',
'serving_size' => 'getServingSize',
'supply_duration_days' => 'getSupplyDurationDays',
'unit_quantity' => 'getUnitQuantity',
'unit_quantity_unit_of_measure_name' => 'getUnitQuantityUnitOfMeasureName',
'ingredients' => 'getIngredients',
'is_used' => 'getIsUsed'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['product_category_name'] = isset($data['product_category_name']) ? $data['product_category_name'] : null;
        $this->container['product_category_type'] = isset($data['product_category_type']) ? $data['product_category_type'] : null;
        $this->container['quantity_type'] = isset($data['quantity_type']) ? $data['quantity_type'] : null;
        $this->container['default_lab_testing_state'] = isset($data['default_lab_testing_state']) ? $data['default_lab_testing_state'] : null;
        $this->container['unit_of_measure_name'] = isset($data['unit_of_measure_name']) ? $data['unit_of_measure_name'] : null;
        $this->container['approval_status'] = isset($data['approval_status']) ? $data['approval_status'] : null;
        $this->container['strain_id'] = isset($data['strain_id']) ? $data['strain_id'] : null;
        $this->container['strain_name'] = isset($data['strain_name']) ? $data['strain_name'] : null;
        $this->container['administration_method'] = isset($data['administration_method']) ? $data['administration_method'] : null;
        $this->container['unit_cbd_percent'] = isset($data['unit_cbd_percent']) ? $data['unit_cbd_percent'] : null;
        $this->container['unit_cbd_content'] = isset($data['unit_cbd_content']) ? $data['unit_cbd_content'] : null;
        $this->container['unit_cbd_content_unit_of_measure_name'] = isset($data['unit_cbd_content_unit_of_measure_name']) ? $data['unit_cbd_content_unit_of_measure_name'] : null;
        $this->container['unit_thc_percent'] = isset($data['unit_thc_percent']) ? $data['unit_thc_percent'] : null;
        $this->container['unit_thc_content'] = isset($data['unit_thc_content']) ? $data['unit_thc_content'] : null;
        $this->container['unit_thc_content_unit_of_measure_name'] = isset($data['unit_thc_content_unit_of_measure_name']) ? $data['unit_thc_content_unit_of_measure_name'] : null;
        $this->container['unit_volume'] = isset($data['unit_volume']) ? $data['unit_volume'] : null;
        $this->container['unit_volume_unit_of_measure_name'] = isset($data['unit_volume_unit_of_measure_name']) ? $data['unit_volume_unit_of_measure_name'] : null;
        $this->container['unit_weight'] = isset($data['unit_weight']) ? $data['unit_weight'] : null;
        $this->container['unit_weight_unit_of_measure_name'] = isset($data['unit_weight_unit_of_measure_name']) ? $data['unit_weight_unit_of_measure_name'] : null;
        $this->container['serving_size'] = isset($data['serving_size']) ? $data['serving_size'] : null;
        $this->container['supply_duration_days'] = isset($data['supply_duration_days']) ? $data['supply_duration_days'] : null;
        $this->container['unit_quantity'] = isset($data['unit_quantity']) ? $data['unit_quantity'] : null;
        $this->container['unit_quantity_unit_of_measure_name'] = isset($data['unit_quantity_unit_of_measure_name']) ? $data['unit_quantity_unit_of_measure_name'] : null;
        $this->container['ingredients'] = isset($data['ingredients']) ? $data['ingredients'] : null;
        $this->container['is_used'] = isset($data['is_used']) ? $data['is_used'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets product_category_name
     *
     * @return string
     */
    public function getProductCategoryName()
    {
        return $this->container['product_category_name'];
    }

    /**
     * Sets product_category_name
     *
     * @param string $product_category_name product_category_name
     *
     * @return $this
     */
    public function setProductCategoryName($product_category_name)
    {
        $this->container['product_category_name'] = $product_category_name;

        return $this;
    }

    /**
     * Gets product_category_type
     *
     * @return string
     */
    public function getProductCategoryType()
    {
        return $this->container['product_category_type'];
    }

    /**
     * Sets product_category_type
     *
     * @param string $product_category_type product_category_type
     *
     * @return $this
     */
    public function setProductCategoryType($product_category_type)
    {
        $this->container['product_category_type'] = $product_category_type;

        return $this;
    }

    /**
     * Gets quantity_type
     *
     * @return string
     */
    public function getQuantityType()
    {
        return $this->container['quantity_type'];
    }

    /**
     * Sets quantity_type
     *
     * @param string $quantity_type quantity_type
     *
     * @return $this
     */
    public function setQuantityType($quantity_type)
    {
        $this->container['quantity_type'] = $quantity_type;

        return $this;
    }

    /**
     * Gets default_lab_testing_state
     *
     * @return int
     */
    public function getDefaultLabTestingState()
    {
        return $this->container['default_lab_testing_state'];
    }

    /**
     * Sets default_lab_testing_state
     *
     * @param int $default_lab_testing_state default_lab_testing_state
     *
     * @return $this
     */
    public function setDefaultLabTestingState($default_lab_testing_state)
    {
        $this->container['default_lab_testing_state'] = $default_lab_testing_state;

        return $this;
    }

    /**
     * Gets unit_of_measure_name
     *
     * @return string
     */
    public function getUnitOfMeasureName()
    {
        return $this->container['unit_of_measure_name'];
    }

    /**
     * Sets unit_of_measure_name
     *
     * @param string $unit_of_measure_name unit_of_measure_name
     *
     * @return $this
     */
    public function setUnitOfMeasureName($unit_of_measure_name)
    {
        $this->container['unit_of_measure_name'] = $unit_of_measure_name;

        return $this;
    }

    /**
     * Gets approval_status
     *
     * @return int
     */
    public function getApprovalStatus()
    {
        return $this->container['approval_status'];
    }

    /**
     * Sets approval_status
     *
     * @param int $approval_status approval_status
     *
     * @return $this
     */
    public function setApprovalStatus($approval_status)
    {
        $this->container['approval_status'] = $approval_status;

        return $this;
    }

    /**
     * Gets strain_id
     *
     * @return int
     */
    public function getStrainId()
    {
        return $this->container['strain_id'];
    }

    /**
     * Sets strain_id
     *
     * @param int $strain_id strain_id
     *
     * @return $this
     */
    public function setStrainId($strain_id)
    {
        $this->container['strain_id'] = $strain_id;

        return $this;
    }

    /**
     * Gets strain_name
     *
     * @return string
     */
    public function getStrainName()
    {
        return $this->container['strain_name'];
    }

    /**
     * Sets strain_name
     *
     * @param string $strain_name strain_name
     *
     * @return $this
     */
    public function setStrainName($strain_name)
    {
        $this->container['strain_name'] = $strain_name;

        return $this;
    }

    /**
     * Gets administration_method
     *
     * @return string
     */
    public function getAdministrationMethod()
    {
        return $this->container['administration_method'];
    }

    /**
     * Sets administration_method
     *
     * @param string $administration_method administration_method
     *
     * @return $this
     */
    public function setAdministrationMethod($administration_method)
    {
        $this->container['administration_method'] = $administration_method;

        return $this;
    }

    /**
     * Gets unit_cbd_percent
     *
     * @return string
     */
    public function getUnitCbdPercent()
    {
        return $this->container['unit_cbd_percent'];
    }

    /**
     * Sets unit_cbd_percent
     *
     * @param string $unit_cbd_percent unit_cbd_percent
     *
     * @return $this
     */
    public function setUnitCbdPercent($unit_cbd_percent)
    {
        $this->container['unit_cbd_percent'] = $unit_cbd_percent;

        return $this;
    }

    /**
     * Gets unit_cbd_content
     *
     * @return string
     */
    public function getUnitCbdContent()
    {
        return $this->container['unit_cbd_content'];
    }

    /**
     * Sets unit_cbd_content
     *
     * @param string $unit_cbd_content unit_cbd_content
     *
     * @return $this
     */
    public function setUnitCbdContent($unit_cbd_content)
    {
        $this->container['unit_cbd_content'] = $unit_cbd_content;

        return $this;
    }

    /**
     * Gets unit_cbd_content_unit_of_measure_name
     *
     * @return string
     */
    public function getUnitCbdContentUnitOfMeasureName()
    {
        return $this->container['unit_cbd_content_unit_of_measure_name'];
    }

    /**
     * Sets unit_cbd_content_unit_of_measure_name
     *
     * @param string $unit_cbd_content_unit_of_measure_name unit_cbd_content_unit_of_measure_name
     *
     * @return $this
     */
    public function setUnitCbdContentUnitOfMeasureName($unit_cbd_content_unit_of_measure_name)
    {
        $this->container['unit_cbd_content_unit_of_measure_name'] = $unit_cbd_content_unit_of_measure_name;

        return $this;
    }

    /**
     * Gets unit_thc_percent
     *
     * @return string
     */
    public function getUnitThcPercent()
    {
        return $this->container['unit_thc_percent'];
    }

    /**
     * Sets unit_thc_percent
     *
     * @param string $unit_thc_percent unit_thc_percent
     *
     * @return $this
     */
    public function setUnitThcPercent($unit_thc_percent)
    {
        $this->container['unit_thc_percent'] = $unit_thc_percent;

        return $this;
    }

    /**
     * Gets unit_thc_content
     *
     * @return string
     */
    public function getUnitThcContent()
    {
        return $this->container['unit_thc_content'];
    }

    /**
     * Sets unit_thc_content
     *
     * @param string $unit_thc_content unit_thc_content
     *
     * @return $this
     */
    public function setUnitThcContent($unit_thc_content)
    {
        $this->container['unit_thc_content'] = $unit_thc_content;

        return $this;
    }

    /**
     * Gets unit_thc_content_unit_of_measure_name
     *
     * @return string
     */
    public function getUnitThcContentUnitOfMeasureName()
    {
        return $this->container['unit_thc_content_unit_of_measure_name'];
    }

    /**
     * Sets unit_thc_content_unit_of_measure_name
     *
     * @param string $unit_thc_content_unit_of_measure_name unit_thc_content_unit_of_measure_name
     *
     * @return $this
     */
    public function setUnitThcContentUnitOfMeasureName($unit_thc_content_unit_of_measure_name)
    {
        $this->container['unit_thc_content_unit_of_measure_name'] = $unit_thc_content_unit_of_measure_name;

        return $this;
    }

    /**
     * Gets unit_volume
     *
     * @return string
     */
    public function getUnitVolume()
    {
        return $this->container['unit_volume'];
    }

    /**
     * Sets unit_volume
     *
     * @param string $unit_volume unit_volume
     *
     * @return $this
     */
    public function setUnitVolume($unit_volume)
    {
        $this->container['unit_volume'] = $unit_volume;

        return $this;
    }

    /**
     * Gets unit_volume_unit_of_measure_name
     *
     * @return string
     */
    public function getUnitVolumeUnitOfMeasureName()
    {
        return $this->container['unit_volume_unit_of_measure_name'];
    }

    /**
     * Sets unit_volume_unit_of_measure_name
     *
     * @param string $unit_volume_unit_of_measure_name unit_volume_unit_of_measure_name
     *
     * @return $this
     */
    public function setUnitVolumeUnitOfMeasureName($unit_volume_unit_of_measure_name)
    {
        $this->container['unit_volume_unit_of_measure_name'] = $unit_volume_unit_of_measure_name;

        return $this;
    }

    /**
     * Gets unit_weight
     *
     * @return string
     */
    public function getUnitWeight()
    {
        return $this->container['unit_weight'];
    }

    /**
     * Sets unit_weight
     *
     * @param string $unit_weight unit_weight
     *
     * @return $this
     */
    public function setUnitWeight($unit_weight)
    {
        $this->container['unit_weight'] = $unit_weight;

        return $this;
    }

    /**
     * Gets unit_weight_unit_of_measure_name
     *
     * @return string
     */
    public function getUnitWeightUnitOfMeasureName()
    {
        return $this->container['unit_weight_unit_of_measure_name'];
    }

    /**
     * Sets unit_weight_unit_of_measure_name
     *
     * @param string $unit_weight_unit_of_measure_name unit_weight_unit_of_measure_name
     *
     * @return $this
     */
    public function setUnitWeightUnitOfMeasureName($unit_weight_unit_of_measure_name)
    {
        $this->container['unit_weight_unit_of_measure_name'] = $unit_weight_unit_of_measure_name;

        return $this;
    }

    /**
     * Gets serving_size
     *
     * @return string
     */
    public function getServingSize()
    {
        return $this->container['serving_size'];
    }

    /**
     * Sets serving_size
     *
     * @param string $serving_size serving_size
     *
     * @return $this
     */
    public function setServingSize($serving_size)
    {
        $this->container['serving_size'] = $serving_size;

        return $this;
    }

    /**
     * Gets supply_duration_days
     *
     * @return string
     */
    public function getSupplyDurationDays()
    {
        return $this->container['supply_duration_days'];
    }

    /**
     * Sets supply_duration_days
     *
     * @param string $supply_duration_days supply_duration_days
     *
     * @return $this
     */
    public function setSupplyDurationDays($supply_duration_days)
    {
        $this->container['supply_duration_days'] = $supply_duration_days;

        return $this;
    }

    /**
     * Gets unit_quantity
     *
     * @return string
     */
    public function getUnitQuantity()
    {
        return $this->container['unit_quantity'];
    }

    /**
     * Sets unit_quantity
     *
     * @param string $unit_quantity unit_quantity
     *
     * @return $this
     */
    public function setUnitQuantity($unit_quantity)
    {
        $this->container['unit_quantity'] = $unit_quantity;

        return $this;
    }

    /**
     * Gets unit_quantity_unit_of_measure_name
     *
     * @return string
     */
    public function getUnitQuantityUnitOfMeasureName()
    {
        return $this->container['unit_quantity_unit_of_measure_name'];
    }

    /**
     * Sets unit_quantity_unit_of_measure_name
     *
     * @param string $unit_quantity_unit_of_measure_name unit_quantity_unit_of_measure_name
     *
     * @return $this
     */
    public function setUnitQuantityUnitOfMeasureName($unit_quantity_unit_of_measure_name)
    {
        $this->container['unit_quantity_unit_of_measure_name'] = $unit_quantity_unit_of_measure_name;

        return $this;
    }

    /**
     * Gets ingredients
     *
     * @return string
     */
    public function getIngredients()
    {
        return $this->container['ingredients'];
    }

    /**
     * Sets ingredients
     *
     * @param string $ingredients ingredients
     *
     * @return $this
     */
    public function setIngredients($ingredients)
    {
        $this->container['ingredients'] = $ingredients;

        return $this;
    }

    /**
     * Gets is_used
     *
     * @return bool
     */
    public function getIsUsed()
    {
        return $this->container['is_used'];
    }

    /**
     * Sets is_used
     *
     * @param bool $is_used is_used
     *
     * @return $this
     */
    public function setIsUsed($is_used)
    {
        $this->container['is_used'] = $is_used;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
