<?php
/**
 * Package
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * METRC API
 *
 * Metrc Web API Documentation
 *
 * OpenAPI spec version: 0.2
 * Contact: paul.kohlhoff@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.11
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Package Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Package implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Package';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'label' => 'string',
'package_type' => 'string',
'source_harvest_names' => 'string',
'room_id' => 'string',
'room_name' => 'string',
'quantity' => 'float',
'unit_of_measure_name' => 'string',
'unit_of_measure_abbreviation' => 'string',
'patient_license_number' => 'string',
'product_id' => 'int',
'product_name' => 'string',
'product_category_name' => 'string',
'note' => 'string',
'packaged_date' => 'string',
'initial_lab_testing_state' => 'string',
'lab_testing_state' => 'string',
'lab_testing_state_date' => 'string',
'is_production_batch' => 'bool',
'production_batch_number' => 'string',
'is_trade_sample' => 'bool',
'is_testing_sample' => 'bool',
'is_process_validation_testing_sample' => 'bool',
'product_requires_remediation' => 'bool',
'contains_remediated_product' => 'bool',
'remediation_date' => 'string',
'received_from_manifest_number' => 'string',
'received_from_facility_license_number' => 'string',
'received_from_facility_name' => 'string',
'received_date_time' => 'string',
'is_on_hold' => 'bool',
'archived_date' => 'string',
'finished_date' => 'string',
'last_modified' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'label' => null,
'package_type' => null,
'source_harvest_names' => null,
'room_id' => null,
'room_name' => null,
'quantity' => null,
'unit_of_measure_name' => null,
'unit_of_measure_abbreviation' => null,
'patient_license_number' => null,
'product_id' => null,
'product_name' => null,
'product_category_name' => null,
'note' => null,
'packaged_date' => null,
'initial_lab_testing_state' => null,
'lab_testing_state' => null,
'lab_testing_state_date' => null,
'is_production_batch' => null,
'production_batch_number' => null,
'is_trade_sample' => null,
'is_testing_sample' => null,
'is_process_validation_testing_sample' => null,
'product_requires_remediation' => null,
'contains_remediated_product' => null,
'remediation_date' => null,
'received_from_manifest_number' => null,
'received_from_facility_license_number' => null,
'received_from_facility_name' => null,
'received_date_time' => null,
'is_on_hold' => null,
'archived_date' => null,
'finished_date' => null,
'last_modified' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
'label' => 'Label',
'package_type' => 'PackageType',
'source_harvest_names' => 'SourceHarvestNames',
'room_id' => 'RoomId',
'room_name' => 'RoomName',
'quantity' => 'Quantity',
'unit_of_measure_name' => 'UnitOfMeasureName',
'unit_of_measure_abbreviation' => 'UnitOfMeasureAbbreviation',
'patient_license_number' => 'PatientLicenseNumber',
'product_id' => 'ProductId',
'product_name' => 'ProductName',
'product_category_name' => 'ProductCategoryName',
'note' => 'Note',
'packaged_date' => 'PackagedDate',
'initial_lab_testing_state' => 'InitialLabTestingState',
'lab_testing_state' => 'LabTestingState',
'lab_testing_state_date' => 'LabTestingStateDate',
'is_production_batch' => 'IsProductionBatch',
'production_batch_number' => 'ProductionBatchNumber',
'is_trade_sample' => 'IsTradeSample',
'is_testing_sample' => 'IsTestingSample',
'is_process_validation_testing_sample' => 'IsProcessValidationTestingSample',
'product_requires_remediation' => 'ProductRequiresRemediation',
'contains_remediated_product' => 'ContainsRemediatedProduct',
'remediation_date' => 'RemediationDate',
'received_from_manifest_number' => 'ReceivedFromManifestNumber',
'received_from_facility_license_number' => 'ReceivedFromFacilityLicenseNumber',
'received_from_facility_name' => 'ReceivedFromFacilityName',
'received_date_time' => 'ReceivedDateTime',
'is_on_hold' => 'IsOnHold',
'archived_date' => 'ArchivedDate',
'finished_date' => 'FinishedDate',
'last_modified' => 'LastModified'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'label' => 'setLabel',
'package_type' => 'setPackageType',
'source_harvest_names' => 'setSourceHarvestNames',
'room_id' => 'setRoomId',
'room_name' => 'setRoomName',
'quantity' => 'setQuantity',
'unit_of_measure_name' => 'setUnitOfMeasureName',
'unit_of_measure_abbreviation' => 'setUnitOfMeasureAbbreviation',
'patient_license_number' => 'setPatientLicenseNumber',
'product_id' => 'setProductId',
'product_name' => 'setProductName',
'product_category_name' => 'setProductCategoryName',
'note' => 'setNote',
'packaged_date' => 'setPackagedDate',
'initial_lab_testing_state' => 'setInitialLabTestingState',
'lab_testing_state' => 'setLabTestingState',
'lab_testing_state_date' => 'setLabTestingStateDate',
'is_production_batch' => 'setIsProductionBatch',
'production_batch_number' => 'setProductionBatchNumber',
'is_trade_sample' => 'setIsTradeSample',
'is_testing_sample' => 'setIsTestingSample',
'is_process_validation_testing_sample' => 'setIsProcessValidationTestingSample',
'product_requires_remediation' => 'setProductRequiresRemediation',
'contains_remediated_product' => 'setContainsRemediatedProduct',
'remediation_date' => 'setRemediationDate',
'received_from_manifest_number' => 'setReceivedFromManifestNumber',
'received_from_facility_license_number' => 'setReceivedFromFacilityLicenseNumber',
'received_from_facility_name' => 'setReceivedFromFacilityName',
'received_date_time' => 'setReceivedDateTime',
'is_on_hold' => 'setIsOnHold',
'archived_date' => 'setArchivedDate',
'finished_date' => 'setFinishedDate',
'last_modified' => 'setLastModified'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'label' => 'getLabel',
'package_type' => 'getPackageType',
'source_harvest_names' => 'getSourceHarvestNames',
'room_id' => 'getRoomId',
'room_name' => 'getRoomName',
'quantity' => 'getQuantity',
'unit_of_measure_name' => 'getUnitOfMeasureName',
'unit_of_measure_abbreviation' => 'getUnitOfMeasureAbbreviation',
'patient_license_number' => 'getPatientLicenseNumber',
'product_id' => 'getProductId',
'product_name' => 'getProductName',
'product_category_name' => 'getProductCategoryName',
'note' => 'getNote',
'packaged_date' => 'getPackagedDate',
'initial_lab_testing_state' => 'getInitialLabTestingState',
'lab_testing_state' => 'getLabTestingState',
'lab_testing_state_date' => 'getLabTestingStateDate',
'is_production_batch' => 'getIsProductionBatch',
'production_batch_number' => 'getProductionBatchNumber',
'is_trade_sample' => 'getIsTradeSample',
'is_testing_sample' => 'getIsTestingSample',
'is_process_validation_testing_sample' => 'getIsProcessValidationTestingSample',
'product_requires_remediation' => 'getProductRequiresRemediation',
'contains_remediated_product' => 'getContainsRemediatedProduct',
'remediation_date' => 'getRemediationDate',
'received_from_manifest_number' => 'getReceivedFromManifestNumber',
'received_from_facility_license_number' => 'getReceivedFromFacilityLicenseNumber',
'received_from_facility_name' => 'getReceivedFromFacilityName',
'received_date_time' => 'getReceivedDateTime',
'is_on_hold' => 'getIsOnHold',
'archived_date' => 'getArchivedDate',
'finished_date' => 'getFinishedDate',
'last_modified' => 'getLastModified'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['package_type'] = isset($data['package_type']) ? $data['package_type'] : null;
        $this->container['source_harvest_names'] = isset($data['source_harvest_names']) ? $data['source_harvest_names'] : null;
        $this->container['room_id'] = isset($data['room_id']) ? $data['room_id'] : null;
        $this->container['room_name'] = isset($data['room_name']) ? $data['room_name'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['unit_of_measure_name'] = isset($data['unit_of_measure_name']) ? $data['unit_of_measure_name'] : null;
        $this->container['unit_of_measure_abbreviation'] = isset($data['unit_of_measure_abbreviation']) ? $data['unit_of_measure_abbreviation'] : null;
        $this->container['patient_license_number'] = isset($data['patient_license_number']) ? $data['patient_license_number'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['product_category_name'] = isset($data['product_category_name']) ? $data['product_category_name'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['packaged_date'] = isset($data['packaged_date']) ? $data['packaged_date'] : null;
        $this->container['initial_lab_testing_state'] = isset($data['initial_lab_testing_state']) ? $data['initial_lab_testing_state'] : null;
        $this->container['lab_testing_state'] = isset($data['lab_testing_state']) ? $data['lab_testing_state'] : null;
        $this->container['lab_testing_state_date'] = isset($data['lab_testing_state_date']) ? $data['lab_testing_state_date'] : null;
        $this->container['is_production_batch'] = isset($data['is_production_batch']) ? $data['is_production_batch'] : null;
        $this->container['production_batch_number'] = isset($data['production_batch_number']) ? $data['production_batch_number'] : null;
        $this->container['is_trade_sample'] = isset($data['is_trade_sample']) ? $data['is_trade_sample'] : null;
        $this->container['is_testing_sample'] = isset($data['is_testing_sample']) ? $data['is_testing_sample'] : null;
        $this->container['is_process_validation_testing_sample'] = isset($data['is_process_validation_testing_sample']) ? $data['is_process_validation_testing_sample'] : null;
        $this->container['product_requires_remediation'] = isset($data['product_requires_remediation']) ? $data['product_requires_remediation'] : null;
        $this->container['contains_remediated_product'] = isset($data['contains_remediated_product']) ? $data['contains_remediated_product'] : null;
        $this->container['remediation_date'] = isset($data['remediation_date']) ? $data['remediation_date'] : null;
        $this->container['received_from_manifest_number'] = isset($data['received_from_manifest_number']) ? $data['received_from_manifest_number'] : null;
        $this->container['received_from_facility_license_number'] = isset($data['received_from_facility_license_number']) ? $data['received_from_facility_license_number'] : null;
        $this->container['received_from_facility_name'] = isset($data['received_from_facility_name']) ? $data['received_from_facility_name'] : null;
        $this->container['received_date_time'] = isset($data['received_date_time']) ? $data['received_date_time'] : null;
        $this->container['is_on_hold'] = isset($data['is_on_hold']) ? $data['is_on_hold'] : null;
        $this->container['archived_date'] = isset($data['archived_date']) ? $data['archived_date'] : null;
        $this->container['finished_date'] = isset($data['finished_date']) ? $data['finished_date'] : null;
        $this->container['last_modified'] = isset($data['last_modified']) ? $data['last_modified'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets package_type
     *
     * @return string
     */
    public function getPackageType()
    {
        return $this->container['package_type'];
    }

    /**
     * Sets package_type
     *
     * @param string $package_type package_type
     *
     * @return $this
     */
    public function setPackageType($package_type)
    {
        $this->container['package_type'] = $package_type;

        return $this;
    }

    /**
     * Gets source_harvest_names
     *
     * @return string
     */
    public function getSourceHarvestNames()
    {
        return $this->container['source_harvest_names'];
    }

    /**
     * Sets source_harvest_names
     *
     * @param string $source_harvest_names source_harvest_names
     *
     * @return $this
     */
    public function setSourceHarvestNames($source_harvest_names)
    {
        $this->container['source_harvest_names'] = $source_harvest_names;

        return $this;
    }

    /**
     * Gets room_id
     *
     * @return string
     */
    public function getRoomId()
    {
        return $this->container['room_id'];
    }

    /**
     * Sets room_id
     *
     * @param string $room_id room_id
     *
     * @return $this
     */
    public function setRoomId($room_id)
    {
        $this->container['room_id'] = $room_id;

        return $this;
    }

    /**
     * Gets room_name
     *
     * @return string
     */
    public function getRoomName()
    {
        return $this->container['room_name'];
    }

    /**
     * Sets room_name
     *
     * @param string $room_name room_name
     *
     * @return $this
     */
    public function setRoomName($room_name)
    {
        $this->container['room_name'] = $room_name;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets unit_of_measure_name
     *
     * @return string
     */
    public function getUnitOfMeasureName()
    {
        return $this->container['unit_of_measure_name'];
    }

    /**
     * Sets unit_of_measure_name
     *
     * @param string $unit_of_measure_name unit_of_measure_name
     *
     * @return $this
     */
    public function setUnitOfMeasureName($unit_of_measure_name)
    {
        $this->container['unit_of_measure_name'] = $unit_of_measure_name;

        return $this;
    }

    /**
     * Gets unit_of_measure_abbreviation
     *
     * @return string
     */
    public function getUnitOfMeasureAbbreviation()
    {
        return $this->container['unit_of_measure_abbreviation'];
    }

    /**
     * Sets unit_of_measure_abbreviation
     *
     * @param string $unit_of_measure_abbreviation unit_of_measure_abbreviation
     *
     * @return $this
     */
    public function setUnitOfMeasureAbbreviation($unit_of_measure_abbreviation)
    {
        $this->container['unit_of_measure_abbreviation'] = $unit_of_measure_abbreviation;

        return $this;
    }

    /**
     * Gets patient_license_number
     *
     * @return string
     */
    public function getPatientLicenseNumber()
    {
        return $this->container['patient_license_number'];
    }

    /**
     * Sets patient_license_number
     *
     * @param string $patient_license_number patient_license_number
     *
     * @return $this
     */
    public function setPatientLicenseNumber($patient_license_number)
    {
        $this->container['patient_license_number'] = $patient_license_number;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name product_name
     *
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets product_category_name
     *
     * @return string
     */
    public function getProductCategoryName()
    {
        return $this->container['product_category_name'];
    }

    /**
     * Sets product_category_name
     *
     * @param string $product_category_name product_category_name
     *
     * @return $this
     */
    public function setProductCategoryName($product_category_name)
    {
        $this->container['product_category_name'] = $product_category_name;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets packaged_date
     *
     * @return string
     */
    public function getPackagedDate()
    {
        return $this->container['packaged_date'];
    }

    /**
     * Sets packaged_date
     *
     * @param string $packaged_date packaged_date
     *
     * @return $this
     */
    public function setPackagedDate($packaged_date)
    {
        $this->container['packaged_date'] = $packaged_date;

        return $this;
    }

    /**
     * Gets initial_lab_testing_state
     *
     * @return string
     */
    public function getInitialLabTestingState()
    {
        return $this->container['initial_lab_testing_state'];
    }

    /**
     * Sets initial_lab_testing_state
     *
     * @param string $initial_lab_testing_state initial_lab_testing_state
     *
     * @return $this
     */
    public function setInitialLabTestingState($initial_lab_testing_state)
    {
        $this->container['initial_lab_testing_state'] = $initial_lab_testing_state;

        return $this;
    }

    /**
     * Gets lab_testing_state
     *
     * @return string
     */
    public function getLabTestingState()
    {
        return $this->container['lab_testing_state'];
    }

    /**
     * Sets lab_testing_state
     *
     * @param string $lab_testing_state lab_testing_state
     *
     * @return $this
     */
    public function setLabTestingState($lab_testing_state)
    {
        $this->container['lab_testing_state'] = $lab_testing_state;

        return $this;
    }

    /**
     * Gets lab_testing_state_date
     *
     * @return string
     */
    public function getLabTestingStateDate()
    {
        return $this->container['lab_testing_state_date'];
    }

    /**
     * Sets lab_testing_state_date
     *
     * @param string $lab_testing_state_date lab_testing_state_date
     *
     * @return $this
     */
    public function setLabTestingStateDate($lab_testing_state_date)
    {
        $this->container['lab_testing_state_date'] = $lab_testing_state_date;

        return $this;
    }

    /**
     * Gets is_production_batch
     *
     * @return bool
     */
    public function getIsProductionBatch()
    {
        return $this->container['is_production_batch'];
    }

    /**
     * Sets is_production_batch
     *
     * @param bool $is_production_batch is_production_batch
     *
     * @return $this
     */
    public function setIsProductionBatch($is_production_batch)
    {
        $this->container['is_production_batch'] = $is_production_batch;

        return $this;
    }

    /**
     * Gets production_batch_number
     *
     * @return string
     */
    public function getProductionBatchNumber()
    {
        return $this->container['production_batch_number'];
    }

    /**
     * Sets production_batch_number
     *
     * @param string $production_batch_number production_batch_number
     *
     * @return $this
     */
    public function setProductionBatchNumber($production_batch_number)
    {
        $this->container['production_batch_number'] = $production_batch_number;

        return $this;
    }

    /**
     * Gets is_trade_sample
     *
     * @return bool
     */
    public function getIsTradeSample()
    {
        return $this->container['is_trade_sample'];
    }

    /**
     * Sets is_trade_sample
     *
     * @param bool $is_trade_sample is_trade_sample
     *
     * @return $this
     */
    public function setIsTradeSample($is_trade_sample)
    {
        $this->container['is_trade_sample'] = $is_trade_sample;

        return $this;
    }

    /**
     * Gets is_testing_sample
     *
     * @return bool
     */
    public function getIsTestingSample()
    {
        return $this->container['is_testing_sample'];
    }

    /**
     * Sets is_testing_sample
     *
     * @param bool $is_testing_sample is_testing_sample
     *
     * @return $this
     */
    public function setIsTestingSample($is_testing_sample)
    {
        $this->container['is_testing_sample'] = $is_testing_sample;

        return $this;
    }

    /**
     * Gets is_process_validation_testing_sample
     *
     * @return bool
     */
    public function getIsProcessValidationTestingSample()
    {
        return $this->container['is_process_validation_testing_sample'];
    }

    /**
     * Sets is_process_validation_testing_sample
     *
     * @param bool $is_process_validation_testing_sample is_process_validation_testing_sample
     *
     * @return $this
     */
    public function setIsProcessValidationTestingSample($is_process_validation_testing_sample)
    {
        $this->container['is_process_validation_testing_sample'] = $is_process_validation_testing_sample;

        return $this;
    }

    /**
     * Gets product_requires_remediation
     *
     * @return bool
     */
    public function getProductRequiresRemediation()
    {
        return $this->container['product_requires_remediation'];
    }

    /**
     * Sets product_requires_remediation
     *
     * @param bool $product_requires_remediation product_requires_remediation
     *
     * @return $this
     */
    public function setProductRequiresRemediation($product_requires_remediation)
    {
        $this->container['product_requires_remediation'] = $product_requires_remediation;

        return $this;
    }

    /**
     * Gets contains_remediated_product
     *
     * @return bool
     */
    public function getContainsRemediatedProduct()
    {
        return $this->container['contains_remediated_product'];
    }

    /**
     * Sets contains_remediated_product
     *
     * @param bool $contains_remediated_product contains_remediated_product
     *
     * @return $this
     */
    public function setContainsRemediatedProduct($contains_remediated_product)
    {
        $this->container['contains_remediated_product'] = $contains_remediated_product;

        return $this;
    }

    /**
     * Gets remediation_date
     *
     * @return string
     */
    public function getRemediationDate()
    {
        return $this->container['remediation_date'];
    }

    /**
     * Sets remediation_date
     *
     * @param string $remediation_date remediation_date
     *
     * @return $this
     */
    public function setRemediationDate($remediation_date)
    {
        $this->container['remediation_date'] = $remediation_date;

        return $this;
    }

    /**
     * Gets received_from_manifest_number
     *
     * @return string
     */
    public function getReceivedFromManifestNumber()
    {
        return $this->container['received_from_manifest_number'];
    }

    /**
     * Sets received_from_manifest_number
     *
     * @param string $received_from_manifest_number received_from_manifest_number
     *
     * @return $this
     */
    public function setReceivedFromManifestNumber($received_from_manifest_number)
    {
        $this->container['received_from_manifest_number'] = $received_from_manifest_number;

        return $this;
    }

    /**
     * Gets received_from_facility_license_number
     *
     * @return string
     */
    public function getReceivedFromFacilityLicenseNumber()
    {
        return $this->container['received_from_facility_license_number'];
    }

    /**
     * Sets received_from_facility_license_number
     *
     * @param string $received_from_facility_license_number received_from_facility_license_number
     *
     * @return $this
     */
    public function setReceivedFromFacilityLicenseNumber($received_from_facility_license_number)
    {
        $this->container['received_from_facility_license_number'] = $received_from_facility_license_number;

        return $this;
    }

    /**
     * Gets received_from_facility_name
     *
     * @return string
     */
    public function getReceivedFromFacilityName()
    {
        return $this->container['received_from_facility_name'];
    }

    /**
     * Sets received_from_facility_name
     *
     * @param string $received_from_facility_name received_from_facility_name
     *
     * @return $this
     */
    public function setReceivedFromFacilityName($received_from_facility_name)
    {
        $this->container['received_from_facility_name'] = $received_from_facility_name;

        return $this;
    }

    /**
     * Gets received_date_time
     *
     * @return string
     */
    public function getReceivedDateTime()
    {
        return $this->container['received_date_time'];
    }

    /**
     * Sets received_date_time
     *
     * @param string $received_date_time received_date_time
     *
     * @return $this
     */
    public function setReceivedDateTime($received_date_time)
    {
        $this->container['received_date_time'] = $received_date_time;

        return $this;
    }

    /**
     * Gets is_on_hold
     *
     * @return bool
     */
    public function getIsOnHold()
    {
        return $this->container['is_on_hold'];
    }

    /**
     * Sets is_on_hold
     *
     * @param bool $is_on_hold is_on_hold
     *
     * @return $this
     */
    public function setIsOnHold($is_on_hold)
    {
        $this->container['is_on_hold'] = $is_on_hold;

        return $this;
    }

    /**
     * Gets archived_date
     *
     * @return string
     */
    public function getArchivedDate()
    {
        return $this->container['archived_date'];
    }

    /**
     * Sets archived_date
     *
     * @param string $archived_date archived_date
     *
     * @return $this
     */
    public function setArchivedDate($archived_date)
    {
        $this->container['archived_date'] = $archived_date;

        return $this;
    }

    /**
     * Gets finished_date
     *
     * @return string
     */
    public function getFinishedDate()
    {
        return $this->container['finished_date'];
    }

    /**
     * Sets finished_date
     *
     * @param string $finished_date finished_date
     *
     * @return $this
     */
    public function setFinishedDate($finished_date)
    {
        $this->container['finished_date'] = $finished_date;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return float
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param float $last_modified last_modified
     *
     * @return $this
     */
    public function setLastModified($last_modified)
    {
        $this->container['last_modified'] = $last_modified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
