<?php
/**
 * CreateStrain
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * METRC API
 *
 * Metrc Web API Documentation
 *
 * OpenAPI spec version: 0.2
 * Contact: paul.kohlhoff@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreateStrain Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateStrain implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateStrain';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'testing_status' => 'string',
        'thc_level' => 'string',
        'cbd_level' => 'string',
        'indica_percentage' => 'float',
        'sativa_percentage' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'testing_status' => null,
        'thc_level' => null,
        'cbd_level' => null,
        'indica_percentage' => null,
        'sativa_percentage' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'testing_status' => 'TestingStatus',
        'thc_level' => 'ThcLevel',
        'cbd_level' => 'CbdLevel',
        'indica_percentage' => 'IndicaPercentage',
        'sativa_percentage' => 'SativaPercentage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'testing_status' => 'setTestingStatus',
        'thc_level' => 'setThcLevel',
        'cbd_level' => 'setCbdLevel',
        'indica_percentage' => 'setIndicaPercentage',
        'sativa_percentage' => 'setSativaPercentage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'testing_status' => 'getTestingStatus',
        'thc_level' => 'getThcLevel',
        'cbd_level' => 'getCbdLevel',
        'indica_percentage' => 'getIndicaPercentage',
        'sativa_percentage' => 'getSativaPercentage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['testing_status'] = isset($data['testing_status']) ? $data['testing_status'] : null;
        $this->container['thc_level'] = isset($data['thc_level']) ? $data['thc_level'] : null;
        $this->container['cbd_level'] = isset($data['cbd_level']) ? $data['cbd_level'] : null;
        $this->container['indica_percentage'] = isset($data['indica_percentage']) ? $data['indica_percentage'] : null;
        $this->container['sativa_percentage'] = isset($data['sativa_percentage']) ? $data['sativa_percentage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets testing_status
     *
     * @return string
     */
    public function getTestingStatus()
    {
        return $this->container['testing_status'];
    }

    /**
     * Sets testing_status
     *
     * @param string $testing_status testing_status
     *
     * @return $this
     */
    public function setTestingStatus($testing_status)
    {
        $this->container['testing_status'] = $testing_status;

        return $this;
    }

    /**
     * Gets thc_level
     *
     * @return string
     */
    public function getThcLevel()
    {
        return $this->container['thc_level'];
    }

    /**
     * Sets thc_level
     *
     * @param string $thc_level thc_level
     *
     * @return $this
     */
    public function setThcLevel($thc_level)
    {
        $this->container['thc_level'] = $thc_level;

        return $this;
    }

    /**
     * Gets cbd_level
     *
     * @return string
     */
    public function getCbdLevel()
    {
        return $this->container['cbd_level'];
    }

    /**
     * Sets cbd_level
     *
     * @param string $cbd_level cbd_level
     *
     * @return $this
     */
    public function setCbdLevel($cbd_level)
    {
        $this->container['cbd_level'] = $cbd_level;

        return $this;
    }

    /**
     * Gets indica_percentage
     *
     * @return float
     */
    public function getIndicaPercentage()
    {
        return $this->container['indica_percentage'];
    }

    /**
     * Sets indica_percentage
     *
     * @param float $indica_percentage indica_percentage
     *
     * @return $this
     */
    public function setIndicaPercentage($indica_percentage)
    {
        $this->container['indica_percentage'] = $indica_percentage;

        return $this;
    }

    /**
     * Gets sativa_percentage
     *
     * @return float
     */
    public function getSativaPercentage()
    {
        return $this->container['sativa_percentage'];
    }

    /**
     * Sets sativa_percentage
     *
     * @param float $sativa_percentage sativa_percentage
     *
     * @return $this
     */
    public function setSativaPercentage($sativa_percentage)
    {
        $this->container['sativa_percentage'] = $sativa_percentage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


