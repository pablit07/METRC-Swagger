<?php
/**
 * Plant
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * METRC API
 *
 * Metrc Web API Documentation
 *
 * OpenAPI spec version: 0.2
 * Contact: paul.kohlhoff@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Plant Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Plant implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Plant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'label' => 'string',
        'state' => 'string',
        'growth_phase' => 'string',
        'plant_batch_id' => 'int',
        'plant_batch_name' => 'string',
        'plant_batch_type_name' => 'string',
        'strain_id' => 'int',
        'strain_name' => 'string',
        'room_id' => 'int',
        'room_name' => 'string',
        'patient_license_number' => 'string',
        'harvest_id' => 'string',
        'harvested_unit_of_weight_name' => 'string',
        'harvested_unit_of_weight_abbreviation' => 'string',
        'harvested_wet_weight' => 'string',
        'harvest_count' => 'int',
        'is_on_hold' => 'bool',
        'planted_date' => 'string',
        'vegetative_date' => 'string',
        'flowering_date' => 'string',
        'harvested_date' => 'string',
        'destroyed_date' => 'string',
        'destroyed_note' => 'string',
        'destroyed_by_user_name' => 'string',
        'last_modified' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'label' => null,
        'state' => null,
        'growth_phase' => null,
        'plant_batch_id' => null,
        'plant_batch_name' => null,
        'plant_batch_type_name' => null,
        'strain_id' => null,
        'strain_name' => null,
        'room_id' => null,
        'room_name' => null,
        'patient_license_number' => null,
        'harvest_id' => null,
        'harvested_unit_of_weight_name' => null,
        'harvested_unit_of_weight_abbreviation' => null,
        'harvested_wet_weight' => null,
        'harvest_count' => null,
        'is_on_hold' => null,
        'planted_date' => null,
        'vegetative_date' => null,
        'flowering_date' => null,
        'harvested_date' => null,
        'destroyed_date' => null,
        'destroyed_note' => null,
        'destroyed_by_user_name' => null,
        'last_modified' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'label' => 'Label',
        'state' => 'State',
        'growth_phase' => 'GrowthPhase',
        'plant_batch_id' => 'PlantBatchId',
        'plant_batch_name' => 'PlantBatchName',
        'plant_batch_type_name' => 'PlantBatchTypeName',
        'strain_id' => 'StrainId',
        'strain_name' => 'StrainName',
        'room_id' => 'RoomId',
        'room_name' => 'RoomName',
        'patient_license_number' => 'PatientLicenseNumber',
        'harvest_id' => 'HarvestId',
        'harvested_unit_of_weight_name' => 'HarvestedUnitOfWeightName',
        'harvested_unit_of_weight_abbreviation' => 'HarvestedUnitOfWeightAbbreviation',
        'harvested_wet_weight' => 'HarvestedWetWeight',
        'harvest_count' => 'HarvestCount',
        'is_on_hold' => 'IsOnHold',
        'planted_date' => 'PlantedDate',
        'vegetative_date' => 'VegetativeDate',
        'flowering_date' => 'FloweringDate',
        'harvested_date' => 'HarvestedDate',
        'destroyed_date' => 'DestroyedDate',
        'destroyed_note' => 'DestroyedNote',
        'destroyed_by_user_name' => 'DestroyedByUserName',
        'last_modified' => 'LastModified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'label' => 'setLabel',
        'state' => 'setState',
        'growth_phase' => 'setGrowthPhase',
        'plant_batch_id' => 'setPlantBatchId',
        'plant_batch_name' => 'setPlantBatchName',
        'plant_batch_type_name' => 'setPlantBatchTypeName',
        'strain_id' => 'setStrainId',
        'strain_name' => 'setStrainName',
        'room_id' => 'setRoomId',
        'room_name' => 'setRoomName',
        'patient_license_number' => 'setPatientLicenseNumber',
        'harvest_id' => 'setHarvestId',
        'harvested_unit_of_weight_name' => 'setHarvestedUnitOfWeightName',
        'harvested_unit_of_weight_abbreviation' => 'setHarvestedUnitOfWeightAbbreviation',
        'harvested_wet_weight' => 'setHarvestedWetWeight',
        'harvest_count' => 'setHarvestCount',
        'is_on_hold' => 'setIsOnHold',
        'planted_date' => 'setPlantedDate',
        'vegetative_date' => 'setVegetativeDate',
        'flowering_date' => 'setFloweringDate',
        'harvested_date' => 'setHarvestedDate',
        'destroyed_date' => 'setDestroyedDate',
        'destroyed_note' => 'setDestroyedNote',
        'destroyed_by_user_name' => 'setDestroyedByUserName',
        'last_modified' => 'setLastModified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'label' => 'getLabel',
        'state' => 'getState',
        'growth_phase' => 'getGrowthPhase',
        'plant_batch_id' => 'getPlantBatchId',
        'plant_batch_name' => 'getPlantBatchName',
        'plant_batch_type_name' => 'getPlantBatchTypeName',
        'strain_id' => 'getStrainId',
        'strain_name' => 'getStrainName',
        'room_id' => 'getRoomId',
        'room_name' => 'getRoomName',
        'patient_license_number' => 'getPatientLicenseNumber',
        'harvest_id' => 'getHarvestId',
        'harvested_unit_of_weight_name' => 'getHarvestedUnitOfWeightName',
        'harvested_unit_of_weight_abbreviation' => 'getHarvestedUnitOfWeightAbbreviation',
        'harvested_wet_weight' => 'getHarvestedWetWeight',
        'harvest_count' => 'getHarvestCount',
        'is_on_hold' => 'getIsOnHold',
        'planted_date' => 'getPlantedDate',
        'vegetative_date' => 'getVegetativeDate',
        'flowering_date' => 'getFloweringDate',
        'harvested_date' => 'getHarvestedDate',
        'destroyed_date' => 'getDestroyedDate',
        'destroyed_note' => 'getDestroyedNote',
        'destroyed_by_user_name' => 'getDestroyedByUserName',
        'last_modified' => 'getLastModified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['growth_phase'] = isset($data['growth_phase']) ? $data['growth_phase'] : null;
        $this->container['plant_batch_id'] = isset($data['plant_batch_id']) ? $data['plant_batch_id'] : null;
        $this->container['plant_batch_name'] = isset($data['plant_batch_name']) ? $data['plant_batch_name'] : null;
        $this->container['plant_batch_type_name'] = isset($data['plant_batch_type_name']) ? $data['plant_batch_type_name'] : null;
        $this->container['strain_id'] = isset($data['strain_id']) ? $data['strain_id'] : null;
        $this->container['strain_name'] = isset($data['strain_name']) ? $data['strain_name'] : null;
        $this->container['room_id'] = isset($data['room_id']) ? $data['room_id'] : null;
        $this->container['room_name'] = isset($data['room_name']) ? $data['room_name'] : null;
        $this->container['patient_license_number'] = isset($data['patient_license_number']) ? $data['patient_license_number'] : null;
        $this->container['harvest_id'] = isset($data['harvest_id']) ? $data['harvest_id'] : null;
        $this->container['harvested_unit_of_weight_name'] = isset($data['harvested_unit_of_weight_name']) ? $data['harvested_unit_of_weight_name'] : null;
        $this->container['harvested_unit_of_weight_abbreviation'] = isset($data['harvested_unit_of_weight_abbreviation']) ? $data['harvested_unit_of_weight_abbreviation'] : null;
        $this->container['harvested_wet_weight'] = isset($data['harvested_wet_weight']) ? $data['harvested_wet_weight'] : null;
        $this->container['harvest_count'] = isset($data['harvest_count']) ? $data['harvest_count'] : null;
        $this->container['is_on_hold'] = isset($data['is_on_hold']) ? $data['is_on_hold'] : null;
        $this->container['planted_date'] = isset($data['planted_date']) ? $data['planted_date'] : null;
        $this->container['vegetative_date'] = isset($data['vegetative_date']) ? $data['vegetative_date'] : null;
        $this->container['flowering_date'] = isset($data['flowering_date']) ? $data['flowering_date'] : null;
        $this->container['harvested_date'] = isset($data['harvested_date']) ? $data['harvested_date'] : null;
        $this->container['destroyed_date'] = isset($data['destroyed_date']) ? $data['destroyed_date'] : null;
        $this->container['destroyed_note'] = isset($data['destroyed_note']) ? $data['destroyed_note'] : null;
        $this->container['destroyed_by_user_name'] = isset($data['destroyed_by_user_name']) ? $data['destroyed_by_user_name'] : null;
        $this->container['last_modified'] = isset($data['last_modified']) ? $data['last_modified'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets growth_phase
     *
     * @return string
     */
    public function getGrowthPhase()
    {
        return $this->container['growth_phase'];
    }

    /**
     * Sets growth_phase
     *
     * @param string $growth_phase growth_phase
     *
     * @return $this
     */
    public function setGrowthPhase($growth_phase)
    {
        $this->container['growth_phase'] = $growth_phase;

        return $this;
    }

    /**
     * Gets plant_batch_id
     *
     * @return int
     */
    public function getPlantBatchId()
    {
        return $this->container['plant_batch_id'];
    }

    /**
     * Sets plant_batch_id
     *
     * @param int $plant_batch_id plant_batch_id
     *
     * @return $this
     */
    public function setPlantBatchId($plant_batch_id)
    {
        $this->container['plant_batch_id'] = $plant_batch_id;

        return $this;
    }

    /**
     * Gets plant_batch_name
     *
     * @return string
     */
    public function getPlantBatchName()
    {
        return $this->container['plant_batch_name'];
    }

    /**
     * Sets plant_batch_name
     *
     * @param string $plant_batch_name plant_batch_name
     *
     * @return $this
     */
    public function setPlantBatchName($plant_batch_name)
    {
        $this->container['plant_batch_name'] = $plant_batch_name;

        return $this;
    }

    /**
     * Gets plant_batch_type_name
     *
     * @return string
     */
    public function getPlantBatchTypeName()
    {
        return $this->container['plant_batch_type_name'];
    }

    /**
     * Sets plant_batch_type_name
     *
     * @param string $plant_batch_type_name plant_batch_type_name
     *
     * @return $this
     */
    public function setPlantBatchTypeName($plant_batch_type_name)
    {
        $this->container['plant_batch_type_name'] = $plant_batch_type_name;

        return $this;
    }

    /**
     * Gets strain_id
     *
     * @return int
     */
    public function getStrainId()
    {
        return $this->container['strain_id'];
    }

    /**
     * Sets strain_id
     *
     * @param int $strain_id strain_id
     *
     * @return $this
     */
    public function setStrainId($strain_id)
    {
        $this->container['strain_id'] = $strain_id;

        return $this;
    }

    /**
     * Gets strain_name
     *
     * @return string
     */
    public function getStrainName()
    {
        return $this->container['strain_name'];
    }

    /**
     * Sets strain_name
     *
     * @param string $strain_name strain_name
     *
     * @return $this
     */
    public function setStrainName($strain_name)
    {
        $this->container['strain_name'] = $strain_name;

        return $this;
    }

    /**
     * Gets room_id
     *
     * @return int
     */
    public function getRoomId()
    {
        return $this->container['room_id'];
    }

    /**
     * Sets room_id
     *
     * @param int $room_id room_id
     *
     * @return $this
     */
    public function setRoomId($room_id)
    {
        $this->container['room_id'] = $room_id;

        return $this;
    }

    /**
     * Gets room_name
     *
     * @return string
     */
    public function getRoomName()
    {
        return $this->container['room_name'];
    }

    /**
     * Sets room_name
     *
     * @param string $room_name room_name
     *
     * @return $this
     */
    public function setRoomName($room_name)
    {
        $this->container['room_name'] = $room_name;

        return $this;
    }

    /**
     * Gets patient_license_number
     *
     * @return string
     */
    public function getPatientLicenseNumber()
    {
        return $this->container['patient_license_number'];
    }

    /**
     * Sets patient_license_number
     *
     * @param string $patient_license_number patient_license_number
     *
     * @return $this
     */
    public function setPatientLicenseNumber($patient_license_number)
    {
        $this->container['patient_license_number'] = $patient_license_number;

        return $this;
    }

    /**
     * Gets harvest_id
     *
     * @return string
     */
    public function getHarvestId()
    {
        return $this->container['harvest_id'];
    }

    /**
     * Sets harvest_id
     *
     * @param string $harvest_id harvest_id
     *
     * @return $this
     */
    public function setHarvestId($harvest_id)
    {
        $this->container['harvest_id'] = $harvest_id;

        return $this;
    }

    /**
     * Gets harvested_unit_of_weight_name
     *
     * @return string
     */
    public function getHarvestedUnitOfWeightName()
    {
        return $this->container['harvested_unit_of_weight_name'];
    }

    /**
     * Sets harvested_unit_of_weight_name
     *
     * @param string $harvested_unit_of_weight_name harvested_unit_of_weight_name
     *
     * @return $this
     */
    public function setHarvestedUnitOfWeightName($harvested_unit_of_weight_name)
    {
        $this->container['harvested_unit_of_weight_name'] = $harvested_unit_of_weight_name;

        return $this;
    }

    /**
     * Gets harvested_unit_of_weight_abbreviation
     *
     * @return string
     */
    public function getHarvestedUnitOfWeightAbbreviation()
    {
        return $this->container['harvested_unit_of_weight_abbreviation'];
    }

    /**
     * Sets harvested_unit_of_weight_abbreviation
     *
     * @param string $harvested_unit_of_weight_abbreviation harvested_unit_of_weight_abbreviation
     *
     * @return $this
     */
    public function setHarvestedUnitOfWeightAbbreviation($harvested_unit_of_weight_abbreviation)
    {
        $this->container['harvested_unit_of_weight_abbreviation'] = $harvested_unit_of_weight_abbreviation;

        return $this;
    }

    /**
     * Gets harvested_wet_weight
     *
     * @return string
     */
    public function getHarvestedWetWeight()
    {
        return $this->container['harvested_wet_weight'];
    }

    /**
     * Sets harvested_wet_weight
     *
     * @param string $harvested_wet_weight harvested_wet_weight
     *
     * @return $this
     */
    public function setHarvestedWetWeight($harvested_wet_weight)
    {
        $this->container['harvested_wet_weight'] = $harvested_wet_weight;

        return $this;
    }

    /**
     * Gets harvest_count
     *
     * @return int
     */
    public function getHarvestCount()
    {
        return $this->container['harvest_count'];
    }

    /**
     * Sets harvest_count
     *
     * @param int $harvest_count harvest_count
     *
     * @return $this
     */
    public function setHarvestCount($harvest_count)
    {
        $this->container['harvest_count'] = $harvest_count;

        return $this;
    }

    /**
     * Gets is_on_hold
     *
     * @return bool
     */
    public function getIsOnHold()
    {
        return $this->container['is_on_hold'];
    }

    /**
     * Sets is_on_hold
     *
     * @param bool $is_on_hold is_on_hold
     *
     * @return $this
     */
    public function setIsOnHold($is_on_hold)
    {
        $this->container['is_on_hold'] = $is_on_hold;

        return $this;
    }

    /**
     * Gets planted_date
     *
     * @return string
     */
    public function getPlantedDate()
    {
        return $this->container['planted_date'];
    }

    /**
     * Sets planted_date
     *
     * @param string $planted_date planted_date
     *
     * @return $this
     */
    public function setPlantedDate($planted_date)
    {
        $this->container['planted_date'] = $planted_date;

        return $this;
    }

    /**
     * Gets vegetative_date
     *
     * @return string
     */
    public function getVegetativeDate()
    {
        return $this->container['vegetative_date'];
    }

    /**
     * Sets vegetative_date
     *
     * @param string $vegetative_date vegetative_date
     *
     * @return $this
     */
    public function setVegetativeDate($vegetative_date)
    {
        $this->container['vegetative_date'] = $vegetative_date;

        return $this;
    }

    /**
     * Gets flowering_date
     *
     * @return string
     */
    public function getFloweringDate()
    {
        return $this->container['flowering_date'];
    }

    /**
     * Sets flowering_date
     *
     * @param string $flowering_date flowering_date
     *
     * @return $this
     */
    public function setFloweringDate($flowering_date)
    {
        $this->container['flowering_date'] = $flowering_date;

        return $this;
    }

    /**
     * Gets harvested_date
     *
     * @return string
     */
    public function getHarvestedDate()
    {
        return $this->container['harvested_date'];
    }

    /**
     * Sets harvested_date
     *
     * @param string $harvested_date harvested_date
     *
     * @return $this
     */
    public function setHarvestedDate($harvested_date)
    {
        $this->container['harvested_date'] = $harvested_date;

        return $this;
    }

    /**
     * Gets destroyed_date
     *
     * @return string
     */
    public function getDestroyedDate()
    {
        return $this->container['destroyed_date'];
    }

    /**
     * Sets destroyed_date
     *
     * @param string $destroyed_date destroyed_date
     *
     * @return $this
     */
    public function setDestroyedDate($destroyed_date)
    {
        $this->container['destroyed_date'] = $destroyed_date;

        return $this;
    }

    /**
     * Gets destroyed_note
     *
     * @return string
     */
    public function getDestroyedNote()
    {
        return $this->container['destroyed_note'];
    }

    /**
     * Sets destroyed_note
     *
     * @param string $destroyed_note destroyed_note
     *
     * @return $this
     */
    public function setDestroyedNote($destroyed_note)
    {
        $this->container['destroyed_note'] = $destroyed_note;

        return $this;
    }

    /**
     * Gets destroyed_by_user_name
     *
     * @return string
     */
    public function getDestroyedByUserName()
    {
        return $this->container['destroyed_by_user_name'];
    }

    /**
     * Sets destroyed_by_user_name
     *
     * @param string $destroyed_by_user_name destroyed_by_user_name
     *
     * @return $this
     */
    public function setDestroyedByUserName($destroyed_by_user_name)
    {
        $this->container['destroyed_by_user_name'] = $destroyed_by_user_name;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return string
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param string $last_modified last_modified
     *
     * @return $this
     */
    public function setLastModified($last_modified)
    {
        $this->container['last_modified'] = $last_modified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


