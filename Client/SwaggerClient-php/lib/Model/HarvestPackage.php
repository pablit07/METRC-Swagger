<?php
/**
 * HarvestPackage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * METRC API
 *
 * Metrc Web API Documentation
 *
 * OpenAPI spec version: 0.2
 * Contact: paul.kohlhoff@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * HarvestPackage Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HarvestPackage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HarvestPackage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tag' => 'string',
        'room' => 'string',
        'item' => 'string',
        'unit_of_weight' => 'string',
        'patient_license_number' => 'string',
        'is_production_batch' => 'bool',
        'production_batch_number' => 'string',
        'product_requires_remediation' => 'bool',
        'remediate_product' => 'bool',
        'remediation_method_id' => 'int',
        'remediation_date' => 'string',
        'remediation_steps' => 'string',
        'actual_date' => 'string',
        'ingredients' => '\Swagger\Client\Model\HarvestPackageIngredients[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tag' => null,
        'room' => null,
        'item' => null,
        'unit_of_weight' => null,
        'patient_license_number' => null,
        'is_production_batch' => null,
        'production_batch_number' => null,
        'product_requires_remediation' => null,
        'remediate_product' => null,
        'remediation_method_id' => null,
        'remediation_date' => null,
        'remediation_steps' => null,
        'actual_date' => null,
        'ingredients' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tag' => 'Tag',
        'room' => 'Room',
        'item' => 'Item',
        'unit_of_weight' => 'UnitOfWeight',
        'patient_license_number' => 'PatientLicenseNumber',
        'is_production_batch' => 'IsProductionBatch',
        'production_batch_number' => 'ProductionBatchNumber',
        'product_requires_remediation' => 'ProductRequiresRemediation',
        'remediate_product' => 'RemediateProduct',
        'remediation_method_id' => 'RemediationMethodId',
        'remediation_date' => 'RemediationDate',
        'remediation_steps' => 'RemediationSteps',
        'actual_date' => 'ActualDate',
        'ingredients' => 'Ingredients'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tag' => 'setTag',
        'room' => 'setRoom',
        'item' => 'setItem',
        'unit_of_weight' => 'setUnitOfWeight',
        'patient_license_number' => 'setPatientLicenseNumber',
        'is_production_batch' => 'setIsProductionBatch',
        'production_batch_number' => 'setProductionBatchNumber',
        'product_requires_remediation' => 'setProductRequiresRemediation',
        'remediate_product' => 'setRemediateProduct',
        'remediation_method_id' => 'setRemediationMethodId',
        'remediation_date' => 'setRemediationDate',
        'remediation_steps' => 'setRemediationSteps',
        'actual_date' => 'setActualDate',
        'ingredients' => 'setIngredients'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tag' => 'getTag',
        'room' => 'getRoom',
        'item' => 'getItem',
        'unit_of_weight' => 'getUnitOfWeight',
        'patient_license_number' => 'getPatientLicenseNumber',
        'is_production_batch' => 'getIsProductionBatch',
        'production_batch_number' => 'getProductionBatchNumber',
        'product_requires_remediation' => 'getProductRequiresRemediation',
        'remediate_product' => 'getRemediateProduct',
        'remediation_method_id' => 'getRemediationMethodId',
        'remediation_date' => 'getRemediationDate',
        'remediation_steps' => 'getRemediationSteps',
        'actual_date' => 'getActualDate',
        'ingredients' => 'getIngredients'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
        $this->container['room'] = isset($data['room']) ? $data['room'] : null;
        $this->container['item'] = isset($data['item']) ? $data['item'] : null;
        $this->container['unit_of_weight'] = isset($data['unit_of_weight']) ? $data['unit_of_weight'] : null;
        $this->container['patient_license_number'] = isset($data['patient_license_number']) ? $data['patient_license_number'] : null;
        $this->container['is_production_batch'] = isset($data['is_production_batch']) ? $data['is_production_batch'] : null;
        $this->container['production_batch_number'] = isset($data['production_batch_number']) ? $data['production_batch_number'] : null;
        $this->container['product_requires_remediation'] = isset($data['product_requires_remediation']) ? $data['product_requires_remediation'] : null;
        $this->container['remediate_product'] = isset($data['remediate_product']) ? $data['remediate_product'] : null;
        $this->container['remediation_method_id'] = isset($data['remediation_method_id']) ? $data['remediation_method_id'] : null;
        $this->container['remediation_date'] = isset($data['remediation_date']) ? $data['remediation_date'] : null;
        $this->container['remediation_steps'] = isset($data['remediation_steps']) ? $data['remediation_steps'] : null;
        $this->container['actual_date'] = isset($data['actual_date']) ? $data['actual_date'] : null;
        $this->container['ingredients'] = isset($data['ingredients']) ? $data['ingredients'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tag
     *
     * @return string
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string $tag tag
     *
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets room
     *
     * @return string
     */
    public function getRoom()
    {
        return $this->container['room'];
    }

    /**
     * Sets room
     *
     * @param string $room room
     *
     * @return $this
     */
    public function setRoom($room)
    {
        $this->container['room'] = $room;

        return $this;
    }

    /**
     * Gets item
     *
     * @return string
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param string $item item
     *
     * @return $this
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets unit_of_weight
     *
     * @return string
     */
    public function getUnitOfWeight()
    {
        return $this->container['unit_of_weight'];
    }

    /**
     * Sets unit_of_weight
     *
     * @param string $unit_of_weight unit_of_weight
     *
     * @return $this
     */
    public function setUnitOfWeight($unit_of_weight)
    {
        $this->container['unit_of_weight'] = $unit_of_weight;

        return $this;
    }

    /**
     * Gets patient_license_number
     *
     * @return string
     */
    public function getPatientLicenseNumber()
    {
        return $this->container['patient_license_number'];
    }

    /**
     * Sets patient_license_number
     *
     * @param string $patient_license_number patient_license_number
     *
     * @return $this
     */
    public function setPatientLicenseNumber($patient_license_number)
    {
        $this->container['patient_license_number'] = $patient_license_number;

        return $this;
    }

    /**
     * Gets is_production_batch
     *
     * @return bool
     */
    public function getIsProductionBatch()
    {
        return $this->container['is_production_batch'];
    }

    /**
     * Sets is_production_batch
     *
     * @param bool $is_production_batch is_production_batch
     *
     * @return $this
     */
    public function setIsProductionBatch($is_production_batch)
    {
        $this->container['is_production_batch'] = $is_production_batch;

        return $this;
    }

    /**
     * Gets production_batch_number
     *
     * @return string
     */
    public function getProductionBatchNumber()
    {
        return $this->container['production_batch_number'];
    }

    /**
     * Sets production_batch_number
     *
     * @param string $production_batch_number production_batch_number
     *
     * @return $this
     */
    public function setProductionBatchNumber($production_batch_number)
    {
        $this->container['production_batch_number'] = $production_batch_number;

        return $this;
    }

    /**
     * Gets product_requires_remediation
     *
     * @return bool
     */
    public function getProductRequiresRemediation()
    {
        return $this->container['product_requires_remediation'];
    }

    /**
     * Sets product_requires_remediation
     *
     * @param bool $product_requires_remediation product_requires_remediation
     *
     * @return $this
     */
    public function setProductRequiresRemediation($product_requires_remediation)
    {
        $this->container['product_requires_remediation'] = $product_requires_remediation;

        return $this;
    }

    /**
     * Gets remediate_product
     *
     * @return bool
     */
    public function getRemediateProduct()
    {
        return $this->container['remediate_product'];
    }

    /**
     * Sets remediate_product
     *
     * @param bool $remediate_product remediate_product
     *
     * @return $this
     */
    public function setRemediateProduct($remediate_product)
    {
        $this->container['remediate_product'] = $remediate_product;

        return $this;
    }

    /**
     * Gets remediation_method_id
     *
     * @return int
     */
    public function getRemediationMethodId()
    {
        return $this->container['remediation_method_id'];
    }

    /**
     * Sets remediation_method_id
     *
     * @param int $remediation_method_id remediation_method_id
     *
     * @return $this
     */
    public function setRemediationMethodId($remediation_method_id)
    {
        $this->container['remediation_method_id'] = $remediation_method_id;

        return $this;
    }

    /**
     * Gets remediation_date
     *
     * @return string
     */
    public function getRemediationDate()
    {
        return $this->container['remediation_date'];
    }

    /**
     * Sets remediation_date
     *
     * @param string $remediation_date remediation_date
     *
     * @return $this
     */
    public function setRemediationDate($remediation_date)
    {
        $this->container['remediation_date'] = $remediation_date;

        return $this;
    }

    /**
     * Gets remediation_steps
     *
     * @return string
     */
    public function getRemediationSteps()
    {
        return $this->container['remediation_steps'];
    }

    /**
     * Sets remediation_steps
     *
     * @param string $remediation_steps remediation_steps
     *
     * @return $this
     */
    public function setRemediationSteps($remediation_steps)
    {
        $this->container['remediation_steps'] = $remediation_steps;

        return $this;
    }

    /**
     * Gets actual_date
     *
     * @return string
     */
    public function getActualDate()
    {
        return $this->container['actual_date'];
    }

    /**
     * Sets actual_date
     *
     * @param string $actual_date actual_date
     *
     * @return $this
     */
    public function setActualDate($actual_date)
    {
        $this->container['actual_date'] = $actual_date;

        return $this;
    }

    /**
     * Gets ingredients
     *
     * @return \Swagger\Client\Model\HarvestPackageIngredients[]
     */
    public function getIngredients()
    {
        return $this->container['ingredients'];
    }

    /**
     * Sets ingredients
     *
     * @param \Swagger\Client\Model\HarvestPackageIngredients[] $ingredients ingredients
     *
     * @return $this
     */
    public function setIngredients($ingredients)
    {
        $this->container['ingredients'] = $ingredients;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


